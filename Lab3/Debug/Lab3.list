
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004914  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004ae0  08004ae0  00014ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08004cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08004cf4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093d2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183f  00000000  00000000  0002940e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c2a  00000000  00000000  0002ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099ca  00000000  00000000  0004c692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7c48  00000000  00000000  0005605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020dc  00000000  00000000  0011dcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004ac4 	.word	0x08004ac4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004ac4 	.word	0x08004ac4

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_d2f>:
 8000934:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000938:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800093c:	bf24      	itt	cs
 800093e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000942:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000946:	d90d      	bls.n	8000964 <__aeabi_d2f+0x30>
 8000948:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800094c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000950:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000958:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000968:	d121      	bne.n	80009ae <__aeabi_d2f+0x7a>
 800096a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800096e:	bfbc      	itt	lt
 8000970:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000974:	4770      	bxlt	lr
 8000976:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800097e:	f1c2 0218 	rsb	r2, r2, #24
 8000982:	f1c2 0c20 	rsb	ip, r2, #32
 8000986:	fa10 f30c 	lsls.w	r3, r0, ip
 800098a:	fa20 f002 	lsr.w	r0, r0, r2
 800098e:	bf18      	it	ne
 8000990:	f040 0001 	orrne.w	r0, r0, #1
 8000994:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000998:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800099c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a0:	ea40 000c 	orr.w	r0, r0, ip
 80009a4:	fa23 f302 	lsr.w	r3, r3, r2
 80009a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ac:	e7cc      	b.n	8000948 <__aeabi_d2f+0x14>
 80009ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b2:	d107      	bne.n	80009c4 <__aeabi_d2f+0x90>
 80009b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b8:	bf1e      	ittt	ne
 80009ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009c2:	4770      	bxne	lr
 80009c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <__aeabi_uldivmod>:
 80009d4:	b953      	cbnz	r3, 80009ec <__aeabi_uldivmod+0x18>
 80009d6:	b94a      	cbnz	r2, 80009ec <__aeabi_uldivmod+0x18>
 80009d8:	2900      	cmp	r1, #0
 80009da:	bf08      	it	eq
 80009dc:	2800      	cmpeq	r0, #0
 80009de:	bf1c      	itt	ne
 80009e0:	f04f 31ff 	movne.w	r1, #4294967295
 80009e4:	f04f 30ff 	movne.w	r0, #4294967295
 80009e8:	f000 b974 	b.w	8000cd4 <__aeabi_idiv0>
 80009ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f4:	f000 f806 	bl	8000a04 <__udivmoddi4>
 80009f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a00:	b004      	add	sp, #16
 8000a02:	4770      	bx	lr

08000a04 <__udivmoddi4>:
 8000a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a08:	9d08      	ldr	r5, [sp, #32]
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	468e      	mov	lr, r1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d14d      	bne.n	8000aae <__udivmoddi4+0xaa>
 8000a12:	428a      	cmp	r2, r1
 8000a14:	4694      	mov	ip, r2
 8000a16:	d969      	bls.n	8000aec <__udivmoddi4+0xe8>
 8000a18:	fab2 f282 	clz	r2, r2
 8000a1c:	b152      	cbz	r2, 8000a34 <__udivmoddi4+0x30>
 8000a1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a22:	f1c2 0120 	rsb	r1, r2, #32
 8000a26:	fa20 f101 	lsr.w	r1, r0, r1
 8000a2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a32:	4094      	lsls	r4, r2
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	0c21      	lsrs	r1, r4, #16
 8000a3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a3e:	fa1f f78c 	uxth.w	r7, ip
 8000a42:	fb08 e316 	mls	r3, r8, r6, lr
 8000a46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a4a:	fb06 f107 	mul.w	r1, r6, r7
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x64>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a5a:	f080 811f 	bcs.w	8000c9c <__udivmoddi4+0x298>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 811c 	bls.w	8000c9c <__udivmoddi4+0x298>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	4463      	add	r3, ip
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a70:	fb08 3310 	mls	r3, r8, r0, r3
 8000a74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a78:	fb00 f707 	mul.w	r7, r0, r7
 8000a7c:	42a7      	cmp	r7, r4
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x92>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a88:	f080 810a 	bcs.w	8000ca0 <__udivmoddi4+0x29c>
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	f240 8107 	bls.w	8000ca0 <__udivmoddi4+0x29c>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a9a:	1be4      	subs	r4, r4, r7
 8000a9c:	2600      	movs	r6, #0
 8000a9e:	b11d      	cbz	r5, 8000aa8 <__udivmoddi4+0xa4>
 8000aa0:	40d4      	lsrs	r4, r2
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d909      	bls.n	8000ac6 <__udivmoddi4+0xc2>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	f000 80ef 	beq.w	8000c96 <__udivmoddi4+0x292>
 8000ab8:	2600      	movs	r6, #0
 8000aba:	e9c5 0100 	strd	r0, r1, [r5]
 8000abe:	4630      	mov	r0, r6
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	fab3 f683 	clz	r6, r3
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d14a      	bne.n	8000b64 <__udivmoddi4+0x160>
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d302      	bcc.n	8000ad8 <__udivmoddi4+0xd4>
 8000ad2:	4282      	cmp	r2, r0
 8000ad4:	f200 80f9 	bhi.w	8000cca <__udivmoddi4+0x2c6>
 8000ad8:	1a84      	subs	r4, r0, r2
 8000ada:	eb61 0303 	sbc.w	r3, r1, r3
 8000ade:	2001      	movs	r0, #1
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d0e0      	beq.n	8000aa8 <__udivmoddi4+0xa4>
 8000ae6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aea:	e7dd      	b.n	8000aa8 <__udivmoddi4+0xa4>
 8000aec:	b902      	cbnz	r2, 8000af0 <__udivmoddi4+0xec>
 8000aee:	deff      	udf	#255	; 0xff
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	f040 8092 	bne.w	8000c1e <__udivmoddi4+0x21a>
 8000afa:	eba1 010c 	sub.w	r1, r1, ip
 8000afe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b02:	fa1f fe8c 	uxth.w	lr, ip
 8000b06:	2601      	movs	r6, #1
 8000b08:	0c20      	lsrs	r0, r4, #16
 8000b0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b16:	fb0e f003 	mul.w	r0, lr, r3
 8000b1a:	4288      	cmp	r0, r1
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x12c>
 8000b1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x12a>
 8000b28:	4288      	cmp	r0, r1
 8000b2a:	f200 80cb 	bhi.w	8000cc4 <__udivmoddi4+0x2c0>
 8000b2e:	4643      	mov	r3, r8
 8000b30:	1a09      	subs	r1, r1, r0
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b38:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b40:	fb0e fe00 	mul.w	lr, lr, r0
 8000b44:	45a6      	cmp	lr, r4
 8000b46:	d908      	bls.n	8000b5a <__udivmoddi4+0x156>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x154>
 8000b52:	45a6      	cmp	lr, r4
 8000b54:	f200 80bb 	bhi.w	8000cce <__udivmoddi4+0x2ca>
 8000b58:	4608      	mov	r0, r1
 8000b5a:	eba4 040e 	sub.w	r4, r4, lr
 8000b5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b62:	e79c      	b.n	8000a9e <__udivmoddi4+0x9a>
 8000b64:	f1c6 0720 	rsb	r7, r6, #32
 8000b68:	40b3      	lsls	r3, r6
 8000b6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b72:	fa20 f407 	lsr.w	r4, r0, r7
 8000b76:	fa01 f306 	lsl.w	r3, r1, r6
 8000b7a:	431c      	orrs	r4, r3
 8000b7c:	40f9      	lsrs	r1, r7
 8000b7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b82:	fa00 f306 	lsl.w	r3, r0, r6
 8000b86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b8a:	0c20      	lsrs	r0, r4, #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fb09 1118 	mls	r1, r9, r8, r1
 8000b94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b98:	fb08 f00e 	mul.w	r0, r8, lr
 8000b9c:	4288      	cmp	r0, r1
 8000b9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000ba2:	d90b      	bls.n	8000bbc <__udivmoddi4+0x1b8>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bac:	f080 8088 	bcs.w	8000cc0 <__udivmoddi4+0x2bc>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f240 8085 	bls.w	8000cc0 <__udivmoddi4+0x2bc>
 8000bb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bba:	4461      	add	r1, ip
 8000bbc:	1a09      	subs	r1, r1, r0
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	458e      	cmp	lr, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x1e2>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bdc:	d26c      	bcs.n	8000cb8 <__udivmoddi4+0x2b4>
 8000bde:	458e      	cmp	lr, r1
 8000be0:	d96a      	bls.n	8000cb8 <__udivmoddi4+0x2b4>
 8000be2:	3802      	subs	r0, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bea:	fba0 9402 	umull	r9, r4, r0, r2
 8000bee:	eba1 010e 	sub.w	r1, r1, lr
 8000bf2:	42a1      	cmp	r1, r4
 8000bf4:	46c8      	mov	r8, r9
 8000bf6:	46a6      	mov	lr, r4
 8000bf8:	d356      	bcc.n	8000ca8 <__udivmoddi4+0x2a4>
 8000bfa:	d053      	beq.n	8000ca4 <__udivmoddi4+0x2a0>
 8000bfc:	b15d      	cbz	r5, 8000c16 <__udivmoddi4+0x212>
 8000bfe:	ebb3 0208 	subs.w	r2, r3, r8
 8000c02:	eb61 010e 	sbc.w	r1, r1, lr
 8000c06:	fa01 f707 	lsl.w	r7, r1, r7
 8000c0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c0e:	40f1      	lsrs	r1, r6
 8000c10:	431f      	orrs	r7, r3
 8000c12:	e9c5 7100 	strd	r7, r1, [r5]
 8000c16:	2600      	movs	r6, #0
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	f1c2 0320 	rsb	r3, r2, #32
 8000c22:	40d8      	lsrs	r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	fa21 f303 	lsr.w	r3, r1, r3
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4301      	orrs	r1, r0
 8000c30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c40:	0c0b      	lsrs	r3, r1, #16
 8000c42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c46:	fb00 f60e 	mul.w	r6, r0, lr
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x260>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c5a:	d22f      	bcs.n	8000cbc <__udivmoddi4+0x2b8>
 8000c5c:	429e      	cmp	r6, r3
 8000c5e:	d92d      	bls.n	8000cbc <__udivmoddi4+0x2b8>
 8000c60:	3802      	subs	r0, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	b289      	uxth	r1, r1
 8000c68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c74:	fb06 f30e 	mul.w	r3, r6, lr
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x28a>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c84:	d216      	bcs.n	8000cb4 <__udivmoddi4+0x2b0>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d914      	bls.n	8000cb4 <__udivmoddi4+0x2b0>
 8000c8a:	3e02      	subs	r6, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	1ac9      	subs	r1, r1, r3
 8000c90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c94:	e738      	b.n	8000b08 <__udivmoddi4+0x104>
 8000c96:	462e      	mov	r6, r5
 8000c98:	4628      	mov	r0, r5
 8000c9a:	e705      	b.n	8000aa8 <__udivmoddi4+0xa4>
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	e6e3      	b.n	8000a68 <__udivmoddi4+0x64>
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	e6f8      	b.n	8000a96 <__udivmoddi4+0x92>
 8000ca4:	454b      	cmp	r3, r9
 8000ca6:	d2a9      	bcs.n	8000bfc <__udivmoddi4+0x1f8>
 8000ca8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cb0:	3801      	subs	r0, #1
 8000cb2:	e7a3      	b.n	8000bfc <__udivmoddi4+0x1f8>
 8000cb4:	4646      	mov	r6, r8
 8000cb6:	e7ea      	b.n	8000c8e <__udivmoddi4+0x28a>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	e794      	b.n	8000be6 <__udivmoddi4+0x1e2>
 8000cbc:	4640      	mov	r0, r8
 8000cbe:	e7d1      	b.n	8000c64 <__udivmoddi4+0x260>
 8000cc0:	46d0      	mov	r8, sl
 8000cc2:	e77b      	b.n	8000bbc <__udivmoddi4+0x1b8>
 8000cc4:	3b02      	subs	r3, #2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	e732      	b.n	8000b30 <__udivmoddi4+0x12c>
 8000cca:	4630      	mov	r0, r6
 8000ccc:	e709      	b.n	8000ae2 <__udivmoddi4+0xde>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	e742      	b.n	8000b5a <__udivmoddi4+0x156>

08000cd4 <__aeabi_idiv0>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <light_sticks>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void light_sticks(int a, int b, int c, int d, int e, int f, int g, int h) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(A_PORT, A_PIN, a ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf0c      	ite	eq
 8000cec:	2301      	moveq	r3, #1
 8000cee:	2300      	movne	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	482d      	ldr	r0, [pc, #180]	; (8000dac <light_sticks+0xd4>)
 8000cf8:	f001 fbbe 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_PORT, B_PIN, b ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bf0c      	ite	eq
 8000d02:	2301      	moveq	r3, #1
 8000d04:	2300      	movne	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0e:	4827      	ldr	r0, [pc, #156]	; (8000dac <light_sticks+0xd4>)
 8000d10:	f001 fbb2 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_PORT, C_PIN, c ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf0c      	ite	eq
 8000d1a:	2301      	moveq	r3, #1
 8000d1c:	2300      	movne	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <light_sticks+0xd4>)
 8000d28:	f001 fba6 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_PORT, D_PIN, d ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf0c      	ite	eq
 8000d32:	2301      	moveq	r3, #1
 8000d34:	2300      	movne	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <light_sticks+0xd8>)
 8000d40:	f001 fb9a 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, e ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d56:	4816      	ldr	r0, [pc, #88]	; (8000db0 <light_sticks+0xd8>)
 8000d58:	f001 fb8e 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_PORT, F_PIN, f ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf0c      	ite	eq
 8000d62:	2301      	moveq	r3, #1
 8000d64:	2300      	movne	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <light_sticks+0xdc>)
 8000d6e:	f001 fb83 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_PORT, G_PIN, g ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf0c      	ite	eq
 8000d78:	2301      	moveq	r3, #1
 8000d7a:	2300      	movne	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <light_sticks+0xd8>)
 8000d86:	f001 fb77 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DP_PORT, DP_PIN, h ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <light_sticks+0xd4>)
 8000d9e:	f001 fb6b 	bl	8002478 <HAL_GPIO_WritePin>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020c00 	.word	0x40020c00

08000db8 <light_position>:

void light_position(int position) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DIG1_PORT, DIG1_PIN,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2110      	movs	r1, #16
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <light_position+0x6c>)
 8000dd2:	f001 fb51 	bl	8002478 <HAL_GPIO_WritePin>
			(position == 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
	HAL_GPIO_WritePin(DIG2_PORT, DIG2_PIN,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <light_position+0x70>)
 8000dea:	f001 fb45 	bl	8002478 <HAL_GPIO_WritePin>
			(position == 2) ? GPIO_PIN_RESET : GPIO_PIN_SET);
	HAL_GPIO_WritePin(DIG3_PORT, DIG3_PIN,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	480b      	ldr	r0, [pc, #44]	; (8000e2c <light_position+0x74>)
 8000e00:	f001 fb3a 	bl	8002478 <HAL_GPIO_WritePin>
			(position == 3) ? GPIO_PIN_RESET : GPIO_PIN_SET);
	HAL_GPIO_WritePin(DIG4_PORT, DIG4_PIN,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf14      	ite	ne
 8000e0a:	2301      	movne	r3, #1
 8000e0c:	2300      	moveq	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	2102      	movs	r1, #2
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <light_position+0x74>)
 8000e16:	f001 fb2f 	bl	8002478 <HAL_GPIO_WritePin>
			(position == 4) ? GPIO_PIN_RESET : GPIO_PIN_SET);
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400

08000e30 <light_digit>:

void light_digit(int position, int digit) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]

	light_position(position);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffbc 	bl	8000db8 <light_position>
	switch (digit) {
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	f200 80ae 	bhi.w	8000fa4 <light_digit+0x174>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <light_digit+0x20>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e79 	.word	0x08000e79
 8000e54:	08000e97 	.word	0x08000e97
 8000e58:	08000eb5 	.word	0x08000eb5
 8000e5c:	08000ed3 	.word	0x08000ed3
 8000e60:	08000ef1 	.word	0x08000ef1
 8000e64:	08000f0f 	.word	0x08000f0f
 8000e68:	08000f2d 	.word	0x08000f2d
 8000e6c:	08000f4b 	.word	0x08000f4b
 8000e70:	08000f69 	.word	0x08000f69
 8000e74:	08000f87 	.word	0x08000f87
	case 0:
		light_sticks(1, 1, 1, 1, 1, 1, 0, 0);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9303      	str	r3, [sp, #12]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2301      	movs	r3, #1
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff ff22 	bl	8000cd8 <light_sticks>
		break;
 8000e94:	e095      	b.n	8000fc2 <light_digit+0x192>
	case 1:
		light_sticks(0, 1, 1, 0, 0, 0, 0, 0);
 8000e96:	2300      	movs	r3, #0
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2101      	movs	r1, #1
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff13 	bl	8000cd8 <light_sticks>
		break;
 8000eb2:	e086      	b.n	8000fc2 <light_digit+0x192>
	case 2:
		light_sticks(1, 1, 0, 1, 1, 0, 1, 0);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <light_sticks>
		break;
 8000ed0:	e077      	b.n	8000fc2 <light_digit+0x192>
	case 3:
		light_sticks(1, 1, 1, 1, 0, 0, 1, 0);
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9303      	str	r3, [sp, #12]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2300      	movs	r3, #0
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fef5 	bl	8000cd8 <light_sticks>
		break;
 8000eee:	e068      	b.n	8000fc2 <light_digit+0x192>
	case 4:
		light_sticks(0, 1, 1, 0, 0, 1, 1, 0);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9303      	str	r3, [sp, #12]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	2300      	movs	r3, #0
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	2201      	movs	r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fee6 	bl	8000cd8 <light_sticks>
		break;
 8000f0c:	e059      	b.n	8000fc2 <light_digit+0x192>
	case 5:
		light_sticks(1, 0, 1, 1, 0, 1, 1, 0);
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9303      	str	r3, [sp, #12]
 8000f12:	2301      	movs	r3, #1
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2201      	movs	r2, #1
 8000f22:	2100      	movs	r1, #0
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fed7 	bl	8000cd8 <light_sticks>
		break;
 8000f2a:	e04a      	b.n	8000fc2 <light_digit+0x192>
	case 6:
		light_sticks(1, 0, 1, 1, 1, 1, 1, 0);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2100      	movs	r1, #0
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff fec8 	bl	8000cd8 <light_sticks>
		break;
 8000f48:	e03b      	b.n	8000fc2 <light_digit+0x192>
	case 7:
		light_sticks(1, 1, 1, 0, 0, 0, 0, 0);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9303      	str	r3, [sp, #12]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	2300      	movs	r3, #0
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff feb9 	bl	8000cd8 <light_sticks>
		break;
 8000f66:	e02c      	b.n	8000fc2 <light_digit+0x192>
	case 8:
		light_sticks(1, 1, 1, 1, 1, 1, 1, 0);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9303      	str	r3, [sp, #12]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff feaa 	bl	8000cd8 <light_sticks>
		break;
 8000f84:	e01d      	b.n	8000fc2 <light_digit+0x192>
	case 9:
		light_sticks(1, 1, 1, 1, 0, 1, 1, 0);
 8000f86:	2300      	movs	r3, #0
 8000f88:	9303      	str	r3, [sp, #12]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fe9b 	bl	8000cd8 <light_sticks>
		break;
 8000fa2:	e00e      	b.n	8000fc2 <light_digit+0x192>
	default:
		light_sticks(0, 0, 0, 0, 0, 0, 0, 0);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fe8c 	bl	8000cd8 <light_sticks>
		break;
 8000fc0:	bf00      	nop
	}

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop

08000fcc <light_number_sin>:
	HAL_Delay(1);
	light_digit(4, (*number / 1000) % 10);
	HAL_Delay(1);
}

void light_number_sin(int* number) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
	float sin_number = (float)sin((double)*number);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fb91 	bl	8000700 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	ec43 2b10 	vmov	d0, r2, r3
 8000fe6:	f002 fda3 	bl	8003b30 <sin>
 8000fea:	ec53 2b10 	vmov	r2, r3, d0
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fc9f 	bl	8000934 <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60fb      	str	r3, [r7, #12]

	light_digit(1, (int)floor(fabs(sin_number) * 100.0) % 10);
 8000ffa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffe:	eef0 7ae7 	vabs.f32	s15, s15
 8001002:	ee17 0a90 	vmov	r0, s15
 8001006:	f7ff fb8d 	bl	8000724 <__aeabi_f2d>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b54      	ldr	r3, [pc, #336]	; (8001160 <light_number_sin+0x194>)
 8001010:	f7ff f8fa 	bl	8000208 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	ec43 2b17 	vmov	d7, r2, r3
 800101c:	eeb0 0a47 	vmov.f32	s0, s14
 8001020:	eef0 0a67 	vmov.f32	s1, s15
 8001024:	f002 fd04 	bl	8003a30 <floor>
 8001028:	ec53 2b10 	vmov	r2, r3, d0
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fc58 	bl	80008e4 <__aeabi_d2iz>
 8001034:	4601      	mov	r1, r0
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <light_number_sin+0x198>)
 8001038:	fb83 2301 	smull	r2, r3, r3, r1
 800103c:	109a      	asrs	r2, r3, #2
 800103e:	17cb      	asrs	r3, r1, #31
 8001040:	1ad2      	subs	r2, r2, r3
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	1aca      	subs	r2, r1, r3
 800104c:	4611      	mov	r1, r2
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff feee 	bl	8000e30 <light_digit>
	HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f000 fbd5 	bl	8001804 <HAL_Delay>
	light_digit(2, (int)floor(fabs(sin_number) * 10.0) % 10);
 800105a:	edd7 7a03 	vldr	s15, [r7, #12]
 800105e:	eef0 7ae7 	vabs.f32	s15, s15
 8001062:	ee17 0a90 	vmov	r0, s15
 8001066:	f7ff fb5d 	bl	8000724 <__aeabi_f2d>
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <light_number_sin+0x19c>)
 8001070:	f7ff f8ca 	bl	8000208 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	ec43 2b17 	vmov	d7, r2, r3
 800107c:	eeb0 0a47 	vmov.f32	s0, s14
 8001080:	eef0 0a67 	vmov.f32	s1, s15
 8001084:	f002 fcd4 	bl	8003a30 <floor>
 8001088:	ec53 2b10 	vmov	r2, r3, d0
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fc28 	bl	80008e4 <__aeabi_d2iz>
 8001094:	4601      	mov	r1, r0
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <light_number_sin+0x198>)
 8001098:	fb83 2301 	smull	r2, r3, r3, r1
 800109c:	109a      	asrs	r2, r3, #2
 800109e:	17cb      	asrs	r3, r1, #31
 80010a0:	1ad2      	subs	r2, r2, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	1aca      	subs	r2, r1, r3
 80010ac:	4611      	mov	r1, r2
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff febe 	bl	8000e30 <light_digit>
	HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 fba5 	bl	8001804 <HAL_Delay>
	if (fabs(sin_number) == 1) {
 80010ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80010be:	eef0 7ae7 	vabs.f32	s15, s15
 80010c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c6:	eef4 7a47 	vcmp.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	d111      	bne.n	80010f4 <light_number_sin+0x128>
		light_position(3); light_sticks(0, 1, 1, 0, 0, 0, 0, 1);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff fe71 	bl	8000db8 <light_position>
 80010d6:	2301      	movs	r3, #1
 80010d8:	9303      	str	r3, [sp, #12]
 80010da:	2300      	movs	r3, #0
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2300      	movs	r3, #0
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2300      	movs	r3, #0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	2201      	movs	r2, #1
 80010ea:	2101      	movs	r1, #1
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fdf3 	bl	8000cd8 <light_sticks>
 80010f2:	e010      	b.n	8001116 <light_number_sin+0x14a>
	} else {
		light_position(3); light_sticks(1, 1, 1, 1, 1, 1, 0, 1);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff fe5f 	bl	8000db8 <light_position>
 80010fa:	2301      	movs	r3, #1
 80010fc:	9303      	str	r3, [sp, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2301      	movs	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	2301      	movs	r3, #1
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2201      	movs	r2, #1
 800110e:	2101      	movs	r1, #1
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fde1 	bl	8000cd8 <light_sticks>
	}
	HAL_Delay(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f000 fb74 	bl	8001804 <HAL_Delay>
	light_position(4); light_sticks(0, 0, 0, 0, 0, 0, sin_number < .0, 0);
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff fe4b 	bl	8000db8 <light_position>
 8001122:	edd7 7a03 	vldr	s15, [r7, #12]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	bf4c      	ite	mi
 8001130:	2301      	movmi	r3, #1
 8001132:	2300      	movpl	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	2300      	movs	r3, #0
 800113a:	9303      	str	r3, [sp, #12]
 800113c:	9202      	str	r2, [sp, #8]
 800113e:	2300      	movs	r3, #0
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2300      	movs	r3, #0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fdc3 	bl	8000cd8 <light_sticks>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fb56 	bl	8001804 <HAL_Delay>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40590000 	.word	0x40590000
 8001164:	66666667 	.word	0x66666667
 8001168:	40240000 	.word	0x40240000

0800116c <HAL_UART_RxCpltCallback>:

unsigned char buf = 0;
char strbuf[2] = {0};
uint8_t is_receiving_number = 0;
int number = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (buf == 'b') {
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b62      	cmp	r3, #98	; 0x62
 800117a:	d106      	bne.n	800118a <HAL_UART_RxCpltCallback+0x1e>
		number = 0;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_UART_RxCpltCallback+0x60>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
		is_receiving_number = 1;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_UART_RxCpltCallback+0x64>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
		return;
 8001188:	e018      	b.n	80011bc <HAL_UART_RxCpltCallback+0x50>
	}
	if (buf == 'e') {
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_UART_RxCpltCallback+0x5c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b65      	cmp	r3, #101	; 0x65
 8001190:	d103      	bne.n	800119a <HAL_UART_RxCpltCallback+0x2e>
		is_receiving_number = 0;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_UART_RxCpltCallback+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		return;
 8001198:	e010      	b.n	80011bc <HAL_UART_RxCpltCallback+0x50>
	}
	if (is_receiving_number) {
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_UART_RxCpltCallback+0x64>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00c      	beq.n	80011bc <HAL_UART_RxCpltCallback+0x50>
		number = number * 10 + (buf - '0');
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_UART_RxCpltCallback+0x60>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0x5c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	3b30      	subs	r3, #48	; 0x30
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_UART_RxCpltCallback+0x60>)
 80011ba:	6013      	str	r3, [r2, #0]
	}
}
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200000cc 	.word	0x200000cc
 80011cc:	200000d0 	.word	0x200000d0
 80011d0:	200000cd 	.word	0x200000cd

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f000 faa2 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f816 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f8ca 	bl	8001378 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e4:	f000 f8a8 	bl	8001338 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011e8:	f000 f87c 	bl	80012e4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_DMA(&huart2, &buf, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	4904      	ldr	r1, [pc, #16]	; (8001200 <main+0x2c>)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <main+0x30>)
 80011f2:	f001 ff0a 	bl	800300a <HAL_UART_Receive_DMA>
	light_number_sin(&number);
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <main+0x34>)
 80011f8:	f7ff fee8 	bl	8000fcc <light_number_sin>
	HAL_UART_Receive_DMA(&huart2, &buf, 1);
 80011fc:	e7f6      	b.n	80011ec <main+0x18>
 80011fe:	bf00      	nop
 8001200:	200000cc 	.word	0x200000cc
 8001204:	20000028 	.word	0x20000028
 8001208:	200000d0 	.word	0x200000d0

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2234      	movs	r2, #52	; 0x34
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fc00 	bl	8003a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <SystemClock_Config+0xd0>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	4a28      	ldr	r2, [pc, #160]	; (80012dc <SystemClock_Config+0xd0>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	; 0x40
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <SystemClock_Config+0xd0>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <SystemClock_Config+0xd4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001258:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <SystemClock_Config+0xd4>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <SystemClock_Config+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001280:	2310      	movs	r3, #16
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800128c:	2302      	movs	r3, #2
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001290:	2302      	movs	r3, #2
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fbcb 	bl	8002a34 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012a4:	f000 f924 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2103      	movs	r1, #3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f8f2 	bl	80024ac <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ce:	f000 f90f 	bl	80014f0 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	; 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_USART2_UART_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800131c:	f001 fe28 	bl	8002f70 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f000 f8e3 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000028 	.word	0x20000028
 8001334:	40004400 	.word	0x40004400

08001338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_DMA_Init+0x3c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <MX_DMA_Init+0x3c>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_DMA_Init+0x3c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2010      	movs	r0, #16
 8001360:	f000 fb4f 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001364:	2010      	movs	r0, #16
 8001366:	f000 fb68 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b52      	ldr	r3, [pc, #328]	; (80014dc <MX_GPIO_Init+0x164>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a51      	ldr	r2, [pc, #324]	; (80014dc <MX_GPIO_Init+0x164>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <MX_GPIO_Init+0x164>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <MX_GPIO_Init+0x164>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <MX_GPIO_Init+0x164>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b48      	ldr	r3, [pc, #288]	; (80014dc <MX_GPIO_Init+0x164>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <MX_GPIO_Init+0x164>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a43      	ldr	r2, [pc, #268]	; (80014dc <MX_GPIO_Init+0x164>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <MX_GPIO_Init+0x164>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <MX_GPIO_Init+0x164>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a3c      	ldr	r2, [pc, #240]	; (80014dc <MX_GPIO_Init+0x164>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_GPIO_Init+0x164>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <MX_GPIO_Init+0x164>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a35      	ldr	r2, [pc, #212]	; (80014dc <MX_GPIO_Init+0x164>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <MX_GPIO_Init+0x164>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800141a:	2200      	movs	r2, #0
 800141c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001420:	482f      	ldr	r0, [pc, #188]	; (80014e0 <MX_GPIO_Init+0x168>)
 8001422:	f001 f829 	bl	8002478 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f641 4110 	movw	r1, #7184	; 0x1c10
 800142c:	482d      	ldr	r0, [pc, #180]	; (80014e4 <MX_GPIO_Init+0x16c>)
 800142e:	f001 f823 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	210a      	movs	r1, #10
 8001436:	482c      	ldr	r0, [pc, #176]	; (80014e8 <MX_GPIO_Init+0x170>)
 8001438:	f001 f81e 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2104      	movs	r1, #4
 8001440:	482a      	ldr	r0, [pc, #168]	; (80014ec <MX_GPIO_Init+0x174>)
 8001442:	f001 f819 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001446:	f649 4340 	movw	r3, #40000	; 0x9c40
 800144a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4820      	ldr	r0, [pc, #128]	; (80014e0 <MX_GPIO_Init+0x168>)
 8001460:	f000 fe76 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001464:	f641 4310 	movw	r3, #7184	; 0x1c10
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4819      	ldr	r0, [pc, #100]	; (80014e4 <MX_GPIO_Init+0x16c>)
 800147e:	f000 fe67 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001482:	2360      	movs	r3, #96	; 0x60
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <MX_GPIO_Init+0x16c>)
 8001496:	f000 fe5b 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800149a:	230a      	movs	r3, #10
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_GPIO_Init+0x170>)
 80014b2:	f000 fe4d 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014b6:	2304      	movs	r3, #4
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_GPIO_Init+0x174>)
 80014ce:	f000 fe3f 	bl	8002150 <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_MspInit+0x4c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x4c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a30      	ldr	r2, [pc, #192]	; (800162c <HAL_UART_MspInit+0xe0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d15a      	bne.n	8001624 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_UART_MspInit+0xe4>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <HAL_UART_MspInit+0xe4>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_UART_MspInit+0xe4>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_UART_MspInit+0xe4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_UART_MspInit+0xe4>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_UART_MspInit+0xe4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <HAL_UART_MspInit+0xe8>)
 80015c2:	f000 fdc5 	bl	8002150 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_UART_MspInit+0xf0>)
 80015ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_UART_MspInit+0xec>)
 80015fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001600:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_UART_MspInit+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_UART_MspInit+0xec>)
 800160a:	f000 fa31 	bl	8001a70 <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001614:	f7ff ff6c 	bl	80014f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_UART_MspInit+0xec>)
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_UART_MspInit+0xec>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40004400 	.word	0x40004400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	2000006c 	.word	0x2000006c
 800163c:	40026088 	.word	0x40026088

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f89a 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA1_Stream5_IRQHandler+0x10>)
 800169a:	f000 faef 	bl	8001c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000006c 	.word	0x2000006c

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f6:	f7ff ffd7 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f002 f96d 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fd69 	bl	80011d4 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001710:	08004ce8 	.word	0x08004ce8
  ldr r2, =_sbss
 8001714:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001718:	200000d8 	.word	0x200000d8

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f94f 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	200f      	movs	r0, #15
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fed2 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f967 	bl	8001a56 <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 f92f 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	200000d4 	.word	0x200000d4

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200000d4 	.word	0x200000d4

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff feb6 	bl	80017ec <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e099      	b.n	8001bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aac:	e00f      	b.n	8001ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aae:	f7ff fe9d 	bl	80017ec <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d908      	bls.n	8001ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e078      	b.n	8001bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e8      	bne.n	8001aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_DMA_Init+0x158>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d107      	bne.n	8001b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4313      	orrs	r3, r2
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f023 0307 	bic.w	r3, r3, #7
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d117      	bne.n	8001b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa6f 	bl	8002058 <DMA_CheckFifoParam>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e016      	b.n	8001bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa26 	bl	8001fec <DMA_CalcBaseAndBitshift>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	223f      	movs	r2, #63	; 0x3f
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	f010803f 	.word	0xf010803f

08001bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_DMA_Start_IT+0x26>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e040      	b.n	8001c74 <HAL_DMA_Start_IT+0xa8>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d12f      	bne.n	8001c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f9b8 	bl	8001f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	223f      	movs	r2, #63	; 0x3f
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0216 	orr.w	r2, r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e005      	b.n	8001c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c88:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_DMA_IRQHandler+0x248>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a8e      	ldr	r2, [pc, #568]	; (8001ec8 <HAL_DMA_IRQHandler+0x24c>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0204 	bic.w	r2, r2, #4
 8001cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2204      	movs	r2, #4
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2204      	movs	r2, #4
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2210      	movs	r2, #16
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d043      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03c      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2210      	movs	r2, #16
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d018      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
 8001daa:	e01f      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e016      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0208 	bic.w	r2, r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2220      	movs	r2, #32
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 808f 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8087 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2220      	movs	r2, #32
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d136      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0216 	bic.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x1da>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	223f      	movs	r2, #63	; 0x3f
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07e      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
        }
        return;
 8001e92:	e079      	b.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d031      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e02c      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e01e      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0210 	bic.w	r2, r2, #16
 8001efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d032      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d307      	bcc.n	8001f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f2      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x2cc>
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f88:	bf00      	nop
    }
  }
}
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d108      	bne.n	8001fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fce:	e007      	b.n	8001fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b10      	subs	r3, #16
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <DMA_CalcBaseAndBitshift+0x64>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <DMA_CalcBaseAndBitshift+0x68>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d909      	bls.n	800202e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58
 800202c:	e007      	b.n	800203e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	aaaaaaab 	.word	0xaaaaaaab
 8002054:	08004af8 	.word	0x08004af8

08002058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d856      	bhi.n	8002126 <DMA_CheckFifoParam+0xce>
 8002078:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <DMA_CheckFifoParam+0x28>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	08002091 	.word	0x08002091
 8002084:	080020a3 	.word	0x080020a3
 8002088:	08002091 	.word	0x08002091
 800208c:	08002127 	.word	0x08002127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d046      	beq.n	800212a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e043      	b.n	800212a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020aa:	d140      	bne.n	800212e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b0:	e03d      	b.n	800212e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d121      	bne.n	8002100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d837      	bhi.n	8002132 <DMA_CheckFifoParam+0xda>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <DMA_CheckFifoParam+0x70>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020df 	.word	0x080020df
 80020d0:	080020d9 	.word	0x080020d9
 80020d4:	080020f1 	.word	0x080020f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e030      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d025      	beq.n	8002136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ee:	e022      	b.n	8002136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f8:	d11f      	bne.n	800213a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fe:	e01c      	b.n	800213a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d903      	bls.n	800210e <DMA_CheckFifoParam+0xb6>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800210c:	e018      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      break;
 8002112:	e015      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e00b      	b.n	800213e <DMA_CheckFifoParam+0xe6>
      break;
 8002126:	bf00      	nop
 8002128:	e00a      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e008      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e006      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e004      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e002      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;   
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
    }
  } 
  
  return status; 
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e165      	b.n	8002438 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8154 	bne.w	8002432 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80ae 	beq.w	8002432 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_GPIO_Init+0x300>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <HAL_GPIO_Init+0x300>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <HAL_GPIO_Init+0x300>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_GPIO_Init+0x304>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4f      	ldr	r2, [pc, #316]	; (8002458 <HAL_GPIO_Init+0x308>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x21a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_GPIO_Init+0x30c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x216>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x310>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x212>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x314>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x20e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x318>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x20a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_GPIO_Init+0x31c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x206>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_GPIO_Init+0x320>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x202>
 800234e:	2306      	movs	r3, #6
 8002350:	e00c      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002352:	2307      	movs	r3, #7
 8002354:	e00a      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002356:	2305      	movs	r3, #5
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x21c>
 800235a:	2304      	movs	r3, #4
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x21c>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x21c>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x21c>
 800236a:	2300      	movs	r3, #0
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	; (8002454 <HAL_GPIO_Init+0x304>)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_GPIO_Init+0x324>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_GPIO_Init+0x324>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_GPIO_Init+0x324>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_GPIO_Init+0x324>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_GPIO_Init+0x324>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_GPIO_Init+0x324>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_GPIO_Init+0x324>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_GPIO_Init+0x324>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	f67f ae96 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40021400 	.word	0x40021400
 8002470:	40021800 	.word	0x40021800
 8002474:	40013c00 	.word	0x40013c00

08002478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002494:	e003      	b.n	800249e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	041a      	lsls	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff f926 	bl	80017ec <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff f922 	bl	80017ec <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f855 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f886 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	08004ae0 	.word	0x08004ae0
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_GetHCLKFreq+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002694:	f7ff fff0 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	08004af0 	.word	0x08004af0

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff ffdc 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0b5b      	lsrs	r3, r3, #13
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08004af0 	.word	0x08004af0

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e4:	b0a6      	sub	sp, #152	; 0x98
 80026e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002706:	4bc8      	ldr	r3, [pc, #800]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b0c      	cmp	r3, #12
 8002710:	f200 817e 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x330>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002751 	.word	0x08002751
 8002720:	08002a11 	.word	0x08002a11
 8002724:	08002a11 	.word	0x08002a11
 8002728:	08002a11 	.word	0x08002a11
 800272c:	08002759 	.word	0x08002759
 8002730:	08002a11 	.word	0x08002a11
 8002734:	08002a11 	.word	0x08002a11
 8002738:	08002a11 	.word	0x08002a11
 800273c:	08002761 	.word	0x08002761
 8002740:	08002a11 	.word	0x08002a11
 8002744:	08002a11 	.word	0x08002a11
 8002748:	08002a11 	.word	0x08002a11
 800274c:	080028cb 	.word	0x080028cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4bb6      	ldr	r3, [pc, #728]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002756:	e15f      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4bb5      	ldr	r3, [pc, #724]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x350>)
 800275a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800275e:	e15b      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002760:	4bb1      	ldr	r3, [pc, #708]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002768:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276c:	4bae      	ldr	r3, [pc, #696]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d031      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002778:	4bab      	ldr	r3, [pc, #684]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	2200      	movs	r2, #0
 8002780:	66bb      	str	r3, [r7, #104]	; 0x68
 8002782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278a:	663b      	str	r3, [r7, #96]	; 0x60
 800278c:	2300      	movs	r3, #0
 800278e:	667b      	str	r3, [r7, #100]	; 0x64
 8002790:	4ba7      	ldr	r3, [pc, #668]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x350>)
 8002792:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002796:	462a      	mov	r2, r5
 8002798:	fb03 f202 	mul.w	r2, r3, r2
 800279c:	2300      	movs	r3, #0
 800279e:	4621      	mov	r1, r4
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	4aa2      	ldr	r2, [pc, #648]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x350>)
 80027a8:	4621      	mov	r1, r4
 80027aa:	fba1 1202 	umull	r1, r2, r1, r2
 80027ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027b0:	460a      	mov	r2, r1
 80027b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80027b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027b6:	4413      	add	r3, r2
 80027b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027be:	2200      	movs	r2, #0
 80027c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80027c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80027cc:	f7fe f902 	bl	80009d4 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4613      	mov	r3, r2
 80027d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027da:	e064      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027dc:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	2200      	movs	r2, #0
 80027e4:	653b      	str	r3, [r7, #80]	; 0x50
 80027e6:	657a      	str	r2, [r7, #84]	; 0x54
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	2300      	movs	r3, #0
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80027f8:	4622      	mov	r2, r4
 80027fa:	462b      	mov	r3, r5
 80027fc:	f04f 0000 	mov.w	r0, #0
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	0159      	lsls	r1, r3, #5
 8002806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280a:	0150      	lsls	r0, r2, #5
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4621      	mov	r1, r4
 8002812:	1a51      	subs	r1, r2, r1
 8002814:	6139      	str	r1, [r7, #16]
 8002816:	4629      	mov	r1, r5
 8002818:	eb63 0301 	sbc.w	r3, r3, r1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800282a:	4659      	mov	r1, fp
 800282c:	018b      	lsls	r3, r1, #6
 800282e:	4651      	mov	r1, sl
 8002830:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002834:	4651      	mov	r1, sl
 8002836:	018a      	lsls	r2, r1, #6
 8002838:	4651      	mov	r1, sl
 800283a:	ebb2 0801 	subs.w	r8, r2, r1
 800283e:	4659      	mov	r1, fp
 8002840:	eb63 0901 	sbc.w	r9, r3, r1
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002850:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002854:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002858:	4690      	mov	r8, r2
 800285a:	4699      	mov	r9, r3
 800285c:	4623      	mov	r3, r4
 800285e:	eb18 0303 	adds.w	r3, r8, r3
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	462b      	mov	r3, r5
 8002866:	eb49 0303 	adc.w	r3, r9, r3
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002878:	4629      	mov	r1, r5
 800287a:	028b      	lsls	r3, r1, #10
 800287c:	4621      	mov	r1, r4
 800287e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002882:	4621      	mov	r1, r4
 8002884:	028a      	lsls	r2, r1, #10
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800288e:	2200      	movs	r2, #0
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
 8002892:	647a      	str	r2, [r7, #68]	; 0x44
 8002894:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002898:	f7fe f89c 	bl	80009d4 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a6:	4b60      	ldr	r3, [pc, #384]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	3301      	adds	r3, #1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80028b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028c8:	e0a6      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ca:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d6:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02a      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	2200      	movs	r2, #0
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028f4:	2100      	movs	r1, #0
 80028f6:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x350>)
 80028f8:	fb03 f201 	mul.w	r2, r3, r1
 80028fc:	2300      	movs	r3, #0
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	4413      	add	r3, r2
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x350>)
 8002906:	fba0 1202 	umull	r1, r2, r0, r2
 800290a:	677a      	str	r2, [r7, #116]	; 0x74
 800290c:	460a      	mov	r2, r1
 800290e:	673a      	str	r2, [r7, #112]	; 0x70
 8002910:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002912:	4413      	add	r3, r2
 8002914:	677b      	str	r3, [r7, #116]	; 0x74
 8002916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291a:	2200      	movs	r2, #0
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
 800291e:	637a      	str	r2, [r7, #52]	; 0x34
 8002920:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002924:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002928:	f7fe f854 	bl	80009d4 <__aeabi_uldivmod>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4613      	mov	r3, r2
 8002932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002936:	e05b      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	2200      	movs	r2, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
 8002942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4641      	mov	r1, r8
 800296e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb63 0b01 	sbc.w	fp, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800298c:	ebb2 040a 	subs.w	r4, r2, sl
 8002990:	eb63 050b 	sbc.w	r5, r3, fp
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	464b      	mov	r3, r9
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d8:	2200      	movs	r2, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	61fa      	str	r2, [r7, #28]
 80029de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e2:	f7fd fff7 	bl	80009d4 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4613      	mov	r3, r2
 80029ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x348>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0f1b      	lsrs	r3, r3, #28
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80029fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3798      	adds	r7, #152	; 0x98
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	017d7840 	.word	0x017d7840

08002a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e28d      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8083 	beq.w	8002b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a54:	4b94      	ldr	r3, [pc, #592]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d019      	beq.n	8002a94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a60:	4b91      	ldr	r3, [pc, #580]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b88      	ldr	r3, [pc, #544]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x124>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e25a      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x90>
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7b      	ldr	r2, [pc, #492]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xcc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xb4>
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a75      	ldr	r2, [pc, #468]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a72      	ldr	r2, [pc, #456]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xcc>
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fe70 	bl	80017ec <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fe6c 	bl	80017ec <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e21f      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xdc>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fe5c 	bl	80017ec <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fe58 	bl	80017ec <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e20b      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x104>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06f      	beq.n	8002c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b44      	ldr	r3, [pc, #272]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x186>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1d3      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCC_OscConfig+0x278>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fe05 	bl	80017ec <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fe01 	bl	80017ec <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1b4      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4925      	ldr	r1, [pc, #148]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_OscConfig+0x278>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fde4 	bl	80017ec <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fde0 	bl	80017ec <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e193      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d036      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fdc4 	bl	80017ec <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fdc0 	bl	80017ec <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e173      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x234>
 8002c86:	e01b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x27c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fdad 	bl	80017ec <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	e00e      	b.n	8002cb4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fda9 	bl	80017ec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d907      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e15c      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	42470000 	.word	0x42470000
 8002cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ea      	bne.n	8002c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8097 	beq.w	8002dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a7e      	ldr	r2, [pc, #504]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	; (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fd69 	bl	80017ec <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe fd65 	bl	80017ec <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e118      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x4b0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x31e>
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	e01c      	b.n	8002d8c <HAL_RCC_OscConfig+0x358>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x340>
 8002d5a:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a60      	ldr	r2, [pc, #384]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
 8002d66:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0x358>
 8002d74:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a59      	ldr	r2, [pc, #356]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d80:	4b57      	ldr	r3, [pc, #348]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a56      	ldr	r2, [pc, #344]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe fd2a 	bl	80017ec <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fd26 	bl	80017ec <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0d7      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ee      	beq.n	8002d9c <HAL_RCC_OscConfig+0x368>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fd14 	bl	80017ec <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fd10 	bl	80017ec <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0c1      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ad 	beq.w	8002f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d060      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d145      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fce4 	bl	80017ec <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fce0 	bl	80017ec <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e093      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	491b      	ldr	r1, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fcb5 	bl	80017ec <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fcb1 	bl	80017ec <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e064      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x452>
 8002ea4:	e05c      	b.n	8002f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <HAL_RCC_OscConfig+0x4b4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fc9e 	bl	80017ec <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe fc9a 	bl	80017ec <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04d      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x480>
 8002ed2:	e045      	b.n	8002f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e040      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_RCC_OscConfig+0x538>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d030      	beq.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d129      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d122      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d119      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e03f      	b.n	8003002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fad8 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fa9b 	bl	80034f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	d11d      	bne.n	8003060 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_UART_Receive_DMA+0x26>
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e016      	b.n	8003062 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Receive_DMA+0x38>
 800303e:	2302      	movs	r3, #2
 8003040:	e00f      	b.n	8003062 <HAL_UART_Receive_DMA+0x58>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	461a      	mov	r2, r3
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f920 	bl	800329c <UART_Start_Receive_DMA>
 800305c:	4603      	mov	r3, r0
 800305e:	e000      	b.n	8003062 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b09c      	sub	sp, #112	; 0x70
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d172      	bne.n	80031ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	2200      	movs	r2, #0
 80030ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80030ee:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e5      	bne.n	80030cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3314      	adds	r3, #20
 8003106:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	e853 3f00 	ldrex	r3, [r3]
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	667b      	str	r3, [r7, #100]	; 0x64
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003120:	647a      	str	r2, [r7, #68]	; 0x44
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e5      	bne.n	8003100 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3314      	adds	r3, #20
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	623b      	str	r3, [r7, #32]
   return(result);
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314a:	663b      	str	r3, [r7, #96]	; 0x60
 800314c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003154:	633a      	str	r2, [r7, #48]	; 0x30
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	2b01      	cmp	r3, #1
 8003176:	d119      	bne.n	80031ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	60fb      	str	r3, [r7, #12]
   return(result);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003198:	61fa      	str	r2, [r7, #28]
 800319a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	69b9      	ldr	r1, [r7, #24]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	617b      	str	r3, [r7, #20]
   return(result);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031b8:	4619      	mov	r1, r3
 80031ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031bc:	f7ff ff69 	bl	8003092 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031c0:	e002      	b.n	80031c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80031c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031c4:	f7fd ffd2 	bl	800116c <HAL_UART_RxCpltCallback>
}
 80031c8:	bf00      	nop
 80031ca:	3770      	adds	r7, #112	; 0x70
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d108      	bne.n	80031f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ff4e 	bl	8003092 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031f6:	e002      	b.n	80031fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff ff36 	bl	800306a <HAL_UART_RxHalfCpltCallback>
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b80      	cmp	r3, #128	; 0x80
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b21      	cmp	r3, #33	; 0x21
 8003238:	d108      	bne.n	800324c <UART_DMAError+0x46>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2200      	movs	r2, #0
 8003244:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003246:	68b8      	ldr	r0, [r7, #8]
 8003248:	f000 f8c6 	bl	80033d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b22      	cmp	r3, #34	; 0x22
 800326c:	d108      	bne.n	8003280 <UART_DMAError+0x7a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800327a:	68b8      	ldr	r0, [r7, #8]
 800327c:	f000 f8d4 	bl	8003428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800328c:	68b8      	ldr	r0, [r7, #8]
 800328e:	f7ff fef6 	bl	800307e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b098      	sub	sp, #96	; 0x60
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2222      	movs	r2, #34	; 0x22
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	4a40      	ldr	r2, [pc, #256]	; (80033cc <UART_Start_Receive_DMA+0x130>)
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	4a3f      	ldr	r2, [pc, #252]	; (80033d0 <UART_Start_Receive_DMA+0x134>)
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	4a3e      	ldr	r2, [pc, #248]	; (80033d4 <UART_Start_Receive_DMA+0x138>)
 80032da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2200      	movs	r2, #0
 80032e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80032e4:	f107 0308 	add.w	r3, r7, #8
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	f7fe fc66 	bl	8001bcc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	65bb      	str	r3, [r7, #88]	; 0x58
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003346:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003348:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800334c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e5      	bne.n	8003326 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3314      	adds	r3, #20
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	657b      	str	r3, [r7, #84]	; 0x54
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800337a:	63ba      	str	r2, [r7, #56]	; 0x38
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	617b      	str	r3, [r7, #20]
   return(result);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a4:	653b      	str	r3, [r7, #80]	; 0x50
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033ae:	627a      	str	r2, [r7, #36]	; 0x24
 80033b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6a39      	ldr	r1, [r7, #32]
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e5      	bne.n	800338e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3760      	adds	r7, #96	; 0x60
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	080030ab 	.word	0x080030ab
 80033d0:	080031d1 	.word	0x080031d1
 80033d4:	08003207 	.word	0x08003207

080033d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	61ba      	str	r2, [r7, #24]
 8003402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	613b      	str	r3, [r7, #16]
   return(result);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800341c:	bf00      	nop
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b095      	sub	sp, #84	; 0x54
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003450:	643a      	str	r2, [r7, #64]	; 0x40
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3314      	adds	r3, #20
 800346a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	61fb      	str	r3, [r7, #28]
   return(result);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	64bb      	str	r3, [r7, #72]	; 0x48
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003484:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e5      	bne.n	8003464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	2b01      	cmp	r3, #1
 800349e:	d119      	bne.n	80034d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	647b      	str	r3, [r7, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034c0:	61ba      	str	r2, [r7, #24]
 80034c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6979      	ldr	r1, [r7, #20]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	613b      	str	r3, [r7, #16]
   return(result);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034e2:	bf00      	nop
 80034e4:	3754      	adds	r7, #84	; 0x54
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b0c0      	sub	sp, #256	; 0x100
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	ea40 0301 	orr.w	r3, r0, r1
 8003518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003548:	f021 010c 	bic.w	r1, r1, #12
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003556:	430b      	orrs	r3, r1
 8003558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	ea40 0301 	orr.w	r3, r0, r1
 8003576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <UART_SetConfig+0x2cc>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <UART_SetConfig+0xa0>
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <UART_SetConfig+0x2d0>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff f892 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003594:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003598:	e003      	b.n	80035a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359a:	f7ff f879 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 800359e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ac:	f040 810c 	bne.w	80037c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ca:	415b      	adcs	r3, r3
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035d2:	4621      	mov	r1, r4
 80035d4:	eb12 0801 	adds.w	r8, r2, r1
 80035d8:	4629      	mov	r1, r5
 80035da:	eb43 0901 	adc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003600:	462b      	mov	r3, r5
 8003602:	eb49 0303 	adc.w	r3, r9, r3
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003616:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800361a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800361e:	460b      	mov	r3, r1
 8003620:	18db      	adds	r3, r3, r3
 8003622:	653b      	str	r3, [r7, #80]	; 0x50
 8003624:	4613      	mov	r3, r2
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
 800362c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003634:	f7fd f9ce 	bl	80009d4 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <UART_SetConfig+0x2d4>)
 800363e:	fba3 2302 	umull	r2, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011c      	lsls	r4, r3, #4
 8003646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003650:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	1891      	adds	r1, r2, r2
 800365e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003660:	415b      	adcs	r3, r3
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003668:	4641      	mov	r1, r8
 800366a:	eb12 0a01 	adds.w	sl, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0b01 	adc.w	fp, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003688:	4692      	mov	sl, r2
 800368a:	469b      	mov	fp, r3
 800368c:	4643      	mov	r3, r8
 800368e:	eb1a 0303 	adds.w	r3, sl, r3
 8003692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003696:	464b      	mov	r3, r9
 8003698:	eb4b 0303 	adc.w	r3, fp, r3
 800369c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
 80036c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ca:	f7fd f983 	bl	80009d4 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2301 	umull	r2, r3, r3, r1
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2264      	movs	r2, #100	; 0x64
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	1acb      	subs	r3, r1, r3
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 2302 	umull	r2, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f8:	441c      	add	r4, r3
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003704:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	63b9      	str	r1, [r7, #56]	; 0x38
 8003714:	415b      	adcs	r3, r3
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6339      	str	r1, [r7, #48]	; 0x30
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003768:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800376c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003786:	f7fd f925 	bl	80009d4 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <UART_SetConfig+0x2d4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <UART_SetConfig+0x2d4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4422      	add	r2, r4
 80037b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b8:	e105      	b.n	80039c6 <UART_SetConfig+0x4d6>
 80037ba:	bf00      	nop
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037da:	4642      	mov	r2, r8
 80037dc:	464b      	mov	r3, r9
 80037de:	1891      	adds	r1, r2, r2
 80037e0:	6239      	str	r1, [r7, #32]
 80037e2:	415b      	adcs	r3, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ea:	4641      	mov	r1, r8
 80037ec:	1854      	adds	r4, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0501 	adc.w	r5, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	00eb      	lsls	r3, r5, #3
 80037fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003802:	00e2      	lsls	r2, r4, #3
 8003804:	4614      	mov	r4, r2
 8003806:	461d      	mov	r5, r3
 8003808:	4643      	mov	r3, r8
 800380a:	18e3      	adds	r3, r4, r3
 800380c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003810:	464b      	mov	r3, r9
 8003812:	eb45 0303 	adc.w	r3, r5, r3
 8003816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003836:	4629      	mov	r1, r5
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4621      	mov	r1, r4
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003848:	f7fd f8c4 	bl	80009d4 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	011c      	lsls	r4, r3, #4
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	61b9      	str	r1, [r7, #24]
 8003874:	415b      	adcs	r3, r3
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6139      	str	r1, [r7, #16]
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038e6:	f7fd f875 	bl	80009d4 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <UART_SetConfig+0x4e4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	; 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	; 0x32
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390e:	441c      	add	r4, r3
 8003910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003914:	2200      	movs	r2, #0
 8003916:	673b      	str	r3, [r7, #112]	; 0x70
 8003918:	677a      	str	r2, [r7, #116]	; 0x74
 800391a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800391e:	4642      	mov	r2, r8
 8003920:	464b      	mov	r3, r9
 8003922:	1891      	adds	r1, r2, r2
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	415b      	adcs	r3, r3
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392e:	4641      	mov	r1, r8
 8003930:	1851      	adds	r1, r2, r1
 8003932:	6039      	str	r1, [r7, #0]
 8003934:	4649      	mov	r1, r9
 8003936:	414b      	adcs	r3, r1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003946:	4659      	mov	r1, fp
 8003948:	00cb      	lsls	r3, r1, #3
 800394a:	4651      	mov	r1, sl
 800394c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003950:	4651      	mov	r1, sl
 8003952:	00ca      	lsls	r2, r1, #3
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	4603      	mov	r3, r0
 800395a:	4642      	mov	r2, r8
 800395c:	189b      	adds	r3, r3, r2
 800395e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003960:	464b      	mov	r3, r9
 8003962:	460a      	mov	r2, r1
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	663b      	str	r3, [r7, #96]	; 0x60
 8003974:	667a      	str	r2, [r7, #100]	; 0x64
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003982:	4649      	mov	r1, r9
 8003984:	008b      	lsls	r3, r1, #2
 8003986:	4641      	mov	r1, r8
 8003988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398c:	4641      	mov	r1, r8
 800398e:	008a      	lsls	r2, r1, #2
 8003990:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003994:	f7fd f81e 	bl	80009d4 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <UART_SetConfig+0x4e4>)
 800399e:	fba3 1302 	umull	r1, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2164      	movs	r1, #100	; 0x64
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <UART_SetConfig+0x4e4>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4422      	add	r2, r4
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039cc:	46bd      	mov	sp, r7
 80039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d2:	bf00      	nop
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4d0d      	ldr	r5, [pc, #52]	; (8003a10 <__libc_init_array+0x38>)
 80039dc:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039de:	1b64      	subs	r4, r4, r5
 80039e0:	10a4      	asrs	r4, r4, #2
 80039e2:	2600      	movs	r6, #0
 80039e4:	42a6      	cmp	r6, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	4d0b      	ldr	r5, [pc, #44]	; (8003a18 <__libc_init_array+0x40>)
 80039ea:	4c0c      	ldr	r4, [pc, #48]	; (8003a1c <__libc_init_array+0x44>)
 80039ec:	f001 f86a 	bl	8004ac4 <_init>
 80039f0:	1b64      	subs	r4, r4, r5
 80039f2:	10a4      	asrs	r4, r4, #2
 80039f4:	2600      	movs	r6, #0
 80039f6:	42a6      	cmp	r6, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a00:	4798      	blx	r3
 8003a02:	3601      	adds	r6, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0a:	4798      	blx	r3
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	08004ce0 	.word	0x08004ce0
 8003a14:	08004ce0 	.word	0x08004ce0
 8003a18:	08004ce0 	.word	0x08004ce0
 8003a1c:	08004ce4 	.word	0x08004ce4

08003a20 <memset>:
 8003a20:	4402      	add	r2, r0
 8003a22:	4603      	mov	r3, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <floor>:
 8003a30:	ec51 0b10 	vmov	r0, r1, d0
 8003a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003a3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003a40:	2e13      	cmp	r6, #19
 8003a42:	ee10 5a10 	vmov	r5, s0
 8003a46:	ee10 8a10 	vmov	r8, s0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	dc32      	bgt.n	8003ab4 <floor+0x84>
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	da14      	bge.n	8003a7c <floor+0x4c>
 8003a52:	a333      	add	r3, pc, #204	; (adr r3, 8003b20 <floor+0xf0>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fd06 	bl	8000468 <__adddf3>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f7fc ff36 	bl	80008d0 <__aeabi_dcmpgt>
 8003a64:	b138      	cbz	r0, 8003a76 <floor+0x46>
 8003a66:	2c00      	cmp	r4, #0
 8003a68:	da57      	bge.n	8003b1a <floor+0xea>
 8003a6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003a6e:	431d      	orrs	r5, r3
 8003a70:	d001      	beq.n	8003a76 <floor+0x46>
 8003a72:	4c2d      	ldr	r4, [pc, #180]	; (8003b28 <floor+0xf8>)
 8003a74:	2500      	movs	r5, #0
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	e025      	b.n	8003ac8 <floor+0x98>
 8003a7c:	4f2b      	ldr	r7, [pc, #172]	; (8003b2c <floor+0xfc>)
 8003a7e:	4137      	asrs	r7, r6
 8003a80:	ea01 0307 	and.w	r3, r1, r7
 8003a84:	4303      	orrs	r3, r0
 8003a86:	d01f      	beq.n	8003ac8 <floor+0x98>
 8003a88:	a325      	add	r3, pc, #148	; (adr r3, 8003b20 <floor+0xf0>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fc fceb 	bl	8000468 <__adddf3>
 8003a92:	2200      	movs	r2, #0
 8003a94:	2300      	movs	r3, #0
 8003a96:	f7fc ff1b 	bl	80008d0 <__aeabi_dcmpgt>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0eb      	beq.n	8003a76 <floor+0x46>
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	bfbe      	ittt	lt
 8003aa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003aa6:	fa43 f606 	asrlt.w	r6, r3, r6
 8003aaa:	19a4      	addlt	r4, r4, r6
 8003aac:	ea24 0407 	bic.w	r4, r4, r7
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	e7e0      	b.n	8003a76 <floor+0x46>
 8003ab4:	2e33      	cmp	r6, #51	; 0x33
 8003ab6:	dd0b      	ble.n	8003ad0 <floor+0xa0>
 8003ab8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003abc:	d104      	bne.n	8003ac8 <floor+0x98>
 8003abe:	ee10 2a10 	vmov	r2, s0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	f7fc fcd0 	bl	8000468 <__adddf3>
 8003ac8:	ec41 0b10 	vmov	d0, r0, r1
 8003acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	fa23 f707 	lsr.w	r7, r3, r7
 8003adc:	4207      	tst	r7, r0
 8003ade:	d0f3      	beq.n	8003ac8 <floor+0x98>
 8003ae0:	a30f      	add	r3, pc, #60	; (adr r3, 8003b20 <floor+0xf0>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f7fc fcbf 	bl	8000468 <__adddf3>
 8003aea:	2200      	movs	r2, #0
 8003aec:	2300      	movs	r3, #0
 8003aee:	f7fc feef 	bl	80008d0 <__aeabi_dcmpgt>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0bf      	beq.n	8003a76 <floor+0x46>
 8003af6:	2c00      	cmp	r4, #0
 8003af8:	da02      	bge.n	8003b00 <floor+0xd0>
 8003afa:	2e14      	cmp	r6, #20
 8003afc:	d103      	bne.n	8003b06 <floor+0xd6>
 8003afe:	3401      	adds	r4, #1
 8003b00:	ea25 0507 	bic.w	r5, r5, r7
 8003b04:	e7b7      	b.n	8003a76 <floor+0x46>
 8003b06:	2301      	movs	r3, #1
 8003b08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003b0c:	fa03 f606 	lsl.w	r6, r3, r6
 8003b10:	4435      	add	r5, r6
 8003b12:	4545      	cmp	r5, r8
 8003b14:	bf38      	it	cc
 8003b16:	18e4      	addcc	r4, r4, r3
 8003b18:	e7f2      	b.n	8003b00 <floor+0xd0>
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	462c      	mov	r4, r5
 8003b1e:	e7aa      	b.n	8003a76 <floor+0x46>
 8003b20:	8800759c 	.word	0x8800759c
 8003b24:	7e37e43c 	.word	0x7e37e43c
 8003b28:	bff00000 	.word	0xbff00000
 8003b2c:	000fffff 	.word	0x000fffff

08003b30 <sin>:
 8003b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b32:	ec53 2b10 	vmov	r2, r3, d0
 8003b36:	4828      	ldr	r0, [pc, #160]	; (8003bd8 <sin+0xa8>)
 8003b38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b3c:	4281      	cmp	r1, r0
 8003b3e:	dc07      	bgt.n	8003b50 <sin+0x20>
 8003b40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003bd0 <sin+0xa0>
 8003b44:	2000      	movs	r0, #0
 8003b46:	b005      	add	sp, #20
 8003b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b4c:	f000 be6c 	b.w	8004828 <__kernel_sin>
 8003b50:	4822      	ldr	r0, [pc, #136]	; (8003bdc <sin+0xac>)
 8003b52:	4281      	cmp	r1, r0
 8003b54:	dd09      	ble.n	8003b6a <sin+0x3a>
 8003b56:	ee10 0a10 	vmov	r0, s0
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fc fc82 	bl	8000464 <__aeabi_dsub>
 8003b60:	ec41 0b10 	vmov	d0, r0, r1
 8003b64:	b005      	add	sp, #20
 8003b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b6a:	4668      	mov	r0, sp
 8003b6c:	f000 f838 	bl	8003be0 <__ieee754_rem_pio2>
 8003b70:	f000 0003 	and.w	r0, r0, #3
 8003b74:	2801      	cmp	r0, #1
 8003b76:	d00c      	beq.n	8003b92 <sin+0x62>
 8003b78:	2802      	cmp	r0, #2
 8003b7a:	d011      	beq.n	8003ba0 <sin+0x70>
 8003b7c:	b9f0      	cbnz	r0, 8003bbc <sin+0x8c>
 8003b7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b82:	ed9d 0b00 	vldr	d0, [sp]
 8003b86:	2001      	movs	r0, #1
 8003b88:	f000 fe4e 	bl	8004828 <__kernel_sin>
 8003b8c:	ec51 0b10 	vmov	r0, r1, d0
 8003b90:	e7e6      	b.n	8003b60 <sin+0x30>
 8003b92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b96:	ed9d 0b00 	vldr	d0, [sp]
 8003b9a:	f000 fa2d 	bl	8003ff8 <__kernel_cos>
 8003b9e:	e7f5      	b.n	8003b8c <sin+0x5c>
 8003ba0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ba4:	ed9d 0b00 	vldr	d0, [sp]
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f000 fe3d 	bl	8004828 <__kernel_sin>
 8003bae:	ec53 2b10 	vmov	r2, r3, d0
 8003bb2:	ee10 0a10 	vmov	r0, s0
 8003bb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003bba:	e7d1      	b.n	8003b60 <sin+0x30>
 8003bbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003bc0:	ed9d 0b00 	vldr	d0, [sp]
 8003bc4:	f000 fa18 	bl	8003ff8 <__kernel_cos>
 8003bc8:	e7f1      	b.n	8003bae <sin+0x7e>
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w
	...
 8003bd8:	3fe921fb 	.word	0x3fe921fb
 8003bdc:	7fefffff 	.word	0x7fefffff

08003be0 <__ieee754_rem_pio2>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	ed2d 8b02 	vpush	{d8}
 8003be8:	ec55 4b10 	vmov	r4, r5, d0
 8003bec:	4bca      	ldr	r3, [pc, #808]	; (8003f18 <__ieee754_rem_pio2+0x338>)
 8003bee:	b08b      	sub	sp, #44	; 0x2c
 8003bf0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003bf4:	4598      	cmp	r8, r3
 8003bf6:	4682      	mov	sl, r0
 8003bf8:	9502      	str	r5, [sp, #8]
 8003bfa:	dc08      	bgt.n	8003c0e <__ieee754_rem_pio2+0x2e>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	ed80 0b00 	vstr	d0, [r0]
 8003c04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003c08:	f04f 0b00 	mov.w	fp, #0
 8003c0c:	e028      	b.n	8003c60 <__ieee754_rem_pio2+0x80>
 8003c0e:	4bc3      	ldr	r3, [pc, #780]	; (8003f1c <__ieee754_rem_pio2+0x33c>)
 8003c10:	4598      	cmp	r8, r3
 8003c12:	dc78      	bgt.n	8003d06 <__ieee754_rem_pio2+0x126>
 8003c14:	9b02      	ldr	r3, [sp, #8]
 8003c16:	4ec2      	ldr	r6, [pc, #776]	; (8003f20 <__ieee754_rem_pio2+0x340>)
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	ee10 0a10 	vmov	r0, s0
 8003c1e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003ee0 <__ieee754_rem_pio2+0x300>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	4629      	mov	r1, r5
 8003c26:	dd39      	ble.n	8003c9c <__ieee754_rem_pio2+0xbc>
 8003c28:	f7fc fc1c 	bl	8000464 <__aeabi_dsub>
 8003c2c:	45b0      	cmp	r8, r6
 8003c2e:	4604      	mov	r4, r0
 8003c30:	460d      	mov	r5, r1
 8003c32:	d01b      	beq.n	8003c6c <__ieee754_rem_pio2+0x8c>
 8003c34:	a3ac      	add	r3, pc, #688	; (adr r3, 8003ee8 <__ieee754_rem_pio2+0x308>)
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f7fc fc13 	bl	8000464 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	e9ca 2300 	strd	r2, r3, [sl]
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc fc0b 	bl	8000464 <__aeabi_dsub>
 8003c4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003ee8 <__ieee754_rem_pio2+0x308>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f7fc fc06 	bl	8000464 <__aeabi_dsub>
 8003c58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003c5c:	f04f 0b01 	mov.w	fp, #1
 8003c60:	4658      	mov	r0, fp
 8003c62:	b00b      	add	sp, #44	; 0x2c
 8003c64:	ecbd 8b02 	vpop	{d8}
 8003c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ef0 <__ieee754_rem_pio2+0x310>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fbf7 	bl	8000464 <__aeabi_dsub>
 8003c76:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ef8 <__ieee754_rem_pio2+0x318>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	460d      	mov	r5, r1
 8003c80:	f7fc fbf0 	bl	8000464 <__aeabi_dsub>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	e9ca 2300 	strd	r2, r3, [sl]
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fbe8 	bl	8000464 <__aeabi_dsub>
 8003c94:	a398      	add	r3, pc, #608	; (adr r3, 8003ef8 <__ieee754_rem_pio2+0x318>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	e7db      	b.n	8003c54 <__ieee754_rem_pio2+0x74>
 8003c9c:	f7fc fbe4 	bl	8000468 <__adddf3>
 8003ca0:	45b0      	cmp	r8, r6
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	460d      	mov	r5, r1
 8003ca6:	d016      	beq.n	8003cd6 <__ieee754_rem_pio2+0xf6>
 8003ca8:	a38f      	add	r3, pc, #572	; (adr r3, 8003ee8 <__ieee754_rem_pio2+0x308>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fbdb 	bl	8000468 <__adddf3>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	e9ca 2300 	strd	r2, r3, [sl]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc fbd1 	bl	8000464 <__aeabi_dsub>
 8003cc2:	a389      	add	r3, pc, #548	; (adr r3, 8003ee8 <__ieee754_rem_pio2+0x308>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f7fc fbce 	bl	8000468 <__adddf3>
 8003ccc:	f04f 3bff 	mov.w	fp, #4294967295
 8003cd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003cd4:	e7c4      	b.n	8003c60 <__ieee754_rem_pio2+0x80>
 8003cd6:	a386      	add	r3, pc, #536	; (adr r3, 8003ef0 <__ieee754_rem_pio2+0x310>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fbc4 	bl	8000468 <__adddf3>
 8003ce0:	a385      	add	r3, pc, #532	; (adr r3, 8003ef8 <__ieee754_rem_pio2+0x318>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	460d      	mov	r5, r1
 8003cea:	f7fc fbbd 	bl	8000468 <__adddf3>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	e9ca 2300 	strd	r2, r3, [sl]
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	f7fc fbb3 	bl	8000464 <__aeabi_dsub>
 8003cfe:	a37e      	add	r3, pc, #504	; (adr r3, 8003ef8 <__ieee754_rem_pio2+0x318>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	e7e0      	b.n	8003cc8 <__ieee754_rem_pio2+0xe8>
 8003d06:	4b87      	ldr	r3, [pc, #540]	; (8003f24 <__ieee754_rem_pio2+0x344>)
 8003d08:	4598      	cmp	r8, r3
 8003d0a:	f300 80d9 	bgt.w	8003ec0 <__ieee754_rem_pio2+0x2e0>
 8003d0e:	f000 fe49 	bl	80049a4 <fabs>
 8003d12:	ec55 4b10 	vmov	r4, r5, d0
 8003d16:	ee10 0a10 	vmov	r0, s0
 8003d1a:	a379      	add	r3, pc, #484	; (adr r3, 8003f00 <__ieee754_rem_pio2+0x320>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fa71 	bl	8000208 <__aeabi_dmul>
 8003d26:	4b80      	ldr	r3, [pc, #512]	; (8003f28 <__ieee754_rem_pio2+0x348>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f7fc fb9d 	bl	8000468 <__adddf3>
 8003d2e:	f7fc fdd9 	bl	80008e4 <__aeabi_d2iz>
 8003d32:	4683      	mov	fp, r0
 8003d34:	f7fc fce4 	bl	8000700 <__aeabi_i2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	ec43 2b18 	vmov	d8, r2, r3
 8003d40:	a367      	add	r3, pc, #412	; (adr r3, 8003ee0 <__ieee754_rem_pio2+0x300>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f7fc fa5f 	bl	8000208 <__aeabi_dmul>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f7fc fb87 	bl	8000464 <__aeabi_dsub>
 8003d56:	a364      	add	r3, pc, #400	; (adr r3, 8003ee8 <__ieee754_rem_pio2+0x308>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	460f      	mov	r7, r1
 8003d60:	ec51 0b18 	vmov	r0, r1, d8
 8003d64:	f7fc fa50 	bl	8000208 <__aeabi_dmul>
 8003d68:	f1bb 0f1f 	cmp.w	fp, #31
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460d      	mov	r5, r1
 8003d70:	dc0d      	bgt.n	8003d8e <__ieee754_rem_pio2+0x1ae>
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <__ieee754_rem_pio2+0x34c>)
 8003d74:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7c:	4543      	cmp	r3, r8
 8003d7e:	d006      	beq.n	8003d8e <__ieee754_rem_pio2+0x1ae>
 8003d80:	4622      	mov	r2, r4
 8003d82:	462b      	mov	r3, r5
 8003d84:	4630      	mov	r0, r6
 8003d86:	4639      	mov	r1, r7
 8003d88:	f7fc fb6c 	bl	8000464 <__aeabi_dsub>
 8003d8c:	e00f      	b.n	8003dae <__ieee754_rem_pio2+0x1ce>
 8003d8e:	462b      	mov	r3, r5
 8003d90:	4622      	mov	r2, r4
 8003d92:	4630      	mov	r0, r6
 8003d94:	4639      	mov	r1, r7
 8003d96:	f7fc fb65 	bl	8000464 <__aeabi_dsub>
 8003d9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003da4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003da8:	f1b8 0f10 	cmp.w	r8, #16
 8003dac:	dc02      	bgt.n	8003db4 <__ieee754_rem_pio2+0x1d4>
 8003dae:	e9ca 0100 	strd	r0, r1, [sl]
 8003db2:	e039      	b.n	8003e28 <__ieee754_rem_pio2+0x248>
 8003db4:	a34e      	add	r3, pc, #312	; (adr r3, 8003ef0 <__ieee754_rem_pio2+0x310>)
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	ec51 0b18 	vmov	r0, r1, d8
 8003dbe:	f7fc fa23 	bl	8000208 <__aeabi_dmul>
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4630      	mov	r0, r6
 8003dcc:	4639      	mov	r1, r7
 8003dce:	f7fc fb49 	bl	8000464 <__aeabi_dsub>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4680      	mov	r8, r0
 8003dd8:	4689      	mov	r9, r1
 8003dda:	4630      	mov	r0, r6
 8003ddc:	4639      	mov	r1, r7
 8003dde:	f7fc fb41 	bl	8000464 <__aeabi_dsub>
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	f7fc fb3d 	bl	8000464 <__aeabi_dsub>
 8003dea:	a343      	add	r3, pc, #268	; (adr r3, 8003ef8 <__ieee754_rem_pio2+0x318>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	4604      	mov	r4, r0
 8003df2:	460d      	mov	r5, r1
 8003df4:	ec51 0b18 	vmov	r0, r1, d8
 8003df8:	f7fc fa06 	bl	8000208 <__aeabi_dmul>
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	462b      	mov	r3, r5
 8003e00:	f7fc fb30 	bl	8000464 <__aeabi_dsub>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	4649      	mov	r1, r9
 8003e10:	f7fc fb28 	bl	8000464 <__aeabi_dsub>
 8003e14:	9a03      	ldr	r2, [sp, #12]
 8003e16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b31      	cmp	r3, #49	; 0x31
 8003e1e:	dc24      	bgt.n	8003e6a <__ieee754_rem_pio2+0x28a>
 8003e20:	e9ca 0100 	strd	r0, r1, [sl]
 8003e24:	4646      	mov	r6, r8
 8003e26:	464f      	mov	r7, r9
 8003e28:	e9da 8900 	ldrd	r8, r9, [sl]
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	4642      	mov	r2, r8
 8003e30:	464b      	mov	r3, r9
 8003e32:	4639      	mov	r1, r7
 8003e34:	f7fc fb16 	bl	8000464 <__aeabi_dsub>
 8003e38:	462b      	mov	r3, r5
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	f7fc fb12 	bl	8000464 <__aeabi_dsub>
 8003e40:	9b02      	ldr	r3, [sp, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003e48:	f6bf af0a 	bge.w	8003c60 <__ieee754_rem_pio2+0x80>
 8003e4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003e50:	f8ca 3004 	str.w	r3, [sl, #4]
 8003e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e58:	f8ca 8000 	str.w	r8, [sl]
 8003e5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8003e60:	f8ca 300c 	str.w	r3, [sl, #12]
 8003e64:	f1cb 0b00 	rsb	fp, fp, #0
 8003e68:	e6fa      	b.n	8003c60 <__ieee754_rem_pio2+0x80>
 8003e6a:	a327      	add	r3, pc, #156	; (adr r3, 8003f08 <__ieee754_rem_pio2+0x328>)
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	ec51 0b18 	vmov	r0, r1, d8
 8003e74:	f7fc f9c8 	bl	8000208 <__aeabi_dmul>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	460d      	mov	r5, r1
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4640      	mov	r0, r8
 8003e82:	4649      	mov	r1, r9
 8003e84:	f7fc faee 	bl	8000464 <__aeabi_dsub>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	460f      	mov	r7, r1
 8003e90:	4640      	mov	r0, r8
 8003e92:	4649      	mov	r1, r9
 8003e94:	f7fc fae6 	bl	8000464 <__aeabi_dsub>
 8003e98:	4622      	mov	r2, r4
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	f7fc fae2 	bl	8000464 <__aeabi_dsub>
 8003ea0:	a31b      	add	r3, pc, #108	; (adr r3, 8003f10 <__ieee754_rem_pio2+0x330>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	ec51 0b18 	vmov	r0, r1, d8
 8003eae:	f7fc f9ab 	bl	8000208 <__aeabi_dmul>
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	f7fc fad5 	bl	8000464 <__aeabi_dsub>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	460d      	mov	r5, r1
 8003ebe:	e75f      	b.n	8003d80 <__ieee754_rem_pio2+0x1a0>
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <__ieee754_rem_pio2+0x350>)
 8003ec2:	4598      	cmp	r8, r3
 8003ec4:	dd36      	ble.n	8003f34 <__ieee754_rem_pio2+0x354>
 8003ec6:	ee10 2a10 	vmov	r2, s0
 8003eca:	462b      	mov	r3, r5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc fac8 	bl	8000464 <__aeabi_dsub>
 8003ed4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ed8:	e9ca 0100 	strd	r0, r1, [sl]
 8003edc:	e694      	b.n	8003c08 <__ieee754_rem_pio2+0x28>
 8003ede:	bf00      	nop
 8003ee0:	54400000 	.word	0x54400000
 8003ee4:	3ff921fb 	.word	0x3ff921fb
 8003ee8:	1a626331 	.word	0x1a626331
 8003eec:	3dd0b461 	.word	0x3dd0b461
 8003ef0:	1a600000 	.word	0x1a600000
 8003ef4:	3dd0b461 	.word	0x3dd0b461
 8003ef8:	2e037073 	.word	0x2e037073
 8003efc:	3ba3198a 	.word	0x3ba3198a
 8003f00:	6dc9c883 	.word	0x6dc9c883
 8003f04:	3fe45f30 	.word	0x3fe45f30
 8003f08:	2e000000 	.word	0x2e000000
 8003f0c:	3ba3198a 	.word	0x3ba3198a
 8003f10:	252049c1 	.word	0x252049c1
 8003f14:	397b839a 	.word	0x397b839a
 8003f18:	3fe921fb 	.word	0x3fe921fb
 8003f1c:	4002d97b 	.word	0x4002d97b
 8003f20:	3ff921fb 	.word	0x3ff921fb
 8003f24:	413921fb 	.word	0x413921fb
 8003f28:	3fe00000 	.word	0x3fe00000
 8003f2c:	08004b00 	.word	0x08004b00
 8003f30:	7fefffff 	.word	0x7fefffff
 8003f34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003f38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003f3c:	ee10 0a10 	vmov	r0, s0
 8003f40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003f44:	ee10 6a10 	vmov	r6, s0
 8003f48:	460f      	mov	r7, r1
 8003f4a:	f7fc fccb 	bl	80008e4 <__aeabi_d2iz>
 8003f4e:	f7fc fbd7 	bl	8000700 <__aeabi_i2d>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4630      	mov	r0, r6
 8003f58:	4639      	mov	r1, r7
 8003f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f5e:	f7fc fa81 	bl	8000464 <__aeabi_dsub>
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <__ieee754_rem_pio2+0x410>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	f7fc f94f 	bl	8000208 <__aeabi_dmul>
 8003f6a:	460f      	mov	r7, r1
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	f7fc fcb9 	bl	80008e4 <__aeabi_d2iz>
 8003f72:	f7fc fbc5 	bl	8000700 <__aeabi_i2d>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f82:	f7fc fa6f 	bl	8000464 <__aeabi_dsub>
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <__ieee754_rem_pio2+0x410>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f7fc f93d 	bl	8000208 <__aeabi_dmul>
 8003f8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f92:	ad04      	add	r5, sp, #16
 8003f94:	f04f 0803 	mov.w	r8, #3
 8003f98:	46a9      	mov	r9, r5
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	2700      	movs	r7, #0
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003fa6:	46c3      	mov	fp, r8
 8003fa8:	3d08      	subs	r5, #8
 8003faa:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fae:	f7fc fc67 	bl	8000880 <__aeabi_dcmpeq>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d1f3      	bne.n	8003f9e <__ieee754_rem_pio2+0x3be>
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <__ieee754_rem_pio2+0x414>)
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	2302      	movs	r3, #2
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	465b      	mov	r3, fp
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	4648      	mov	r0, r9
 8003fc6:	f000 f8df 	bl	8004188 <__kernel_rem_pio2>
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	4683      	mov	fp, r0
 8003fd0:	f6bf ae46 	bge.w	8003c60 <__ieee754_rem_pio2+0x80>
 8003fd4:	e9da 2100 	ldrd	r2, r1, [sl]
 8003fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fdc:	e9ca 2300 	strd	r2, r3, [sl]
 8003fe0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fe8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003fec:	e73a      	b.n	8003e64 <__ieee754_rem_pio2+0x284>
 8003fee:	bf00      	nop
 8003ff0:	41700000 	.word	0x41700000
 8003ff4:	08004b80 	.word	0x08004b80

08003ff8 <__kernel_cos>:
 8003ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	ec57 6b10 	vmov	r6, r7, d0
 8004000:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004004:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004008:	ed8d 1b00 	vstr	d1, [sp]
 800400c:	da07      	bge.n	800401e <__kernel_cos+0x26>
 800400e:	ee10 0a10 	vmov	r0, s0
 8004012:	4639      	mov	r1, r7
 8004014:	f7fc fc66 	bl	80008e4 <__aeabi_d2iz>
 8004018:	2800      	cmp	r0, #0
 800401a:	f000 8088 	beq.w	800412e <__kernel_cos+0x136>
 800401e:	4632      	mov	r2, r6
 8004020:	463b      	mov	r3, r7
 8004022:	4630      	mov	r0, r6
 8004024:	4639      	mov	r1, r7
 8004026:	f7fc f8ef 	bl	8000208 <__aeabi_dmul>
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <__kernel_cos+0x178>)
 800402c:	2200      	movs	r2, #0
 800402e:	4604      	mov	r4, r0
 8004030:	460d      	mov	r5, r1
 8004032:	f7fc f8e9 	bl	8000208 <__aeabi_dmul>
 8004036:	a340      	add	r3, pc, #256	; (adr r3, 8004138 <__kernel_cos+0x140>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	4682      	mov	sl, r0
 800403e:	468b      	mov	fp, r1
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc f8e0 	bl	8000208 <__aeabi_dmul>
 8004048:	a33d      	add	r3, pc, #244	; (adr r3, 8004140 <__kernel_cos+0x148>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	f7fc fa0b 	bl	8000468 <__adddf3>
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	f7fc f8d7 	bl	8000208 <__aeabi_dmul>
 800405a:	a33b      	add	r3, pc, #236	; (adr r3, 8004148 <__kernel_cos+0x150>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc fa00 	bl	8000464 <__aeabi_dsub>
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	f7fc f8ce 	bl	8000208 <__aeabi_dmul>
 800406c:	a338      	add	r3, pc, #224	; (adr r3, 8004150 <__kernel_cos+0x158>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc f9f9 	bl	8000468 <__adddf3>
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f7fc f8c5 	bl	8000208 <__aeabi_dmul>
 800407e:	a336      	add	r3, pc, #216	; (adr r3, 8004158 <__kernel_cos+0x160>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f9ee 	bl	8000464 <__aeabi_dsub>
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	f7fc f8bc 	bl	8000208 <__aeabi_dmul>
 8004090:	a333      	add	r3, pc, #204	; (adr r3, 8004160 <__kernel_cos+0x168>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc f9e7 	bl	8000468 <__adddf3>
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f7fc f8b3 	bl	8000208 <__aeabi_dmul>
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	f7fc f8af 	bl	8000208 <__aeabi_dmul>
 80040aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040ae:	4604      	mov	r4, r0
 80040b0:	460d      	mov	r5, r1
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7fc f8a7 	bl	8000208 <__aeabi_dmul>
 80040ba:	460b      	mov	r3, r1
 80040bc:	4602      	mov	r2, r0
 80040be:	4629      	mov	r1, r5
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7fc f9cf 	bl	8000464 <__aeabi_dsub>
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <__kernel_cos+0x17c>)
 80040c8:	4598      	cmp	r8, r3
 80040ca:	4606      	mov	r6, r0
 80040cc:	460f      	mov	r7, r1
 80040ce:	dc10      	bgt.n	80040f2 <__kernel_cos+0xfa>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4650      	mov	r0, sl
 80040d6:	4659      	mov	r1, fp
 80040d8:	f7fc f9c4 	bl	8000464 <__aeabi_dsub>
 80040dc:	460b      	mov	r3, r1
 80040de:	4926      	ldr	r1, [pc, #152]	; (8004178 <__kernel_cos+0x180>)
 80040e0:	4602      	mov	r2, r0
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7fc f9be 	bl	8000464 <__aeabi_dsub>
 80040e8:	ec41 0b10 	vmov	d0, r0, r1
 80040ec:	b003      	add	sp, #12
 80040ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <__kernel_cos+0x184>)
 80040f4:	4920      	ldr	r1, [pc, #128]	; (8004178 <__kernel_cos+0x180>)
 80040f6:	4598      	cmp	r8, r3
 80040f8:	bfcc      	ite	gt
 80040fa:	4d21      	ldrgt	r5, [pc, #132]	; (8004180 <__kernel_cos+0x188>)
 80040fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004100:	2400      	movs	r4, #0
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	2000      	movs	r0, #0
 8004108:	f7fc f9ac 	bl	8000464 <__aeabi_dsub>
 800410c:	4622      	mov	r2, r4
 800410e:	4680      	mov	r8, r0
 8004110:	4689      	mov	r9, r1
 8004112:	462b      	mov	r3, r5
 8004114:	4650      	mov	r0, sl
 8004116:	4659      	mov	r1, fp
 8004118:	f7fc f9a4 	bl	8000464 <__aeabi_dsub>
 800411c:	4632      	mov	r2, r6
 800411e:	463b      	mov	r3, r7
 8004120:	f7fc f9a0 	bl	8000464 <__aeabi_dsub>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4640      	mov	r0, r8
 800412a:	4649      	mov	r1, r9
 800412c:	e7da      	b.n	80040e4 <__kernel_cos+0xec>
 800412e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004168 <__kernel_cos+0x170>
 8004132:	e7db      	b.n	80040ec <__kernel_cos+0xf4>
 8004134:	f3af 8000 	nop.w
 8004138:	be8838d4 	.word	0xbe8838d4
 800413c:	bda8fae9 	.word	0xbda8fae9
 8004140:	bdb4b1c4 	.word	0xbdb4b1c4
 8004144:	3e21ee9e 	.word	0x3e21ee9e
 8004148:	809c52ad 	.word	0x809c52ad
 800414c:	3e927e4f 	.word	0x3e927e4f
 8004150:	19cb1590 	.word	0x19cb1590
 8004154:	3efa01a0 	.word	0x3efa01a0
 8004158:	16c15177 	.word	0x16c15177
 800415c:	3f56c16c 	.word	0x3f56c16c
 8004160:	5555554c 	.word	0x5555554c
 8004164:	3fa55555 	.word	0x3fa55555
 8004168:	00000000 	.word	0x00000000
 800416c:	3ff00000 	.word	0x3ff00000
 8004170:	3fe00000 	.word	0x3fe00000
 8004174:	3fd33332 	.word	0x3fd33332
 8004178:	3ff00000 	.word	0x3ff00000
 800417c:	3fe90000 	.word	0x3fe90000
 8004180:	3fd20000 	.word	0x3fd20000
 8004184:	00000000 	.word	0x00000000

08004188 <__kernel_rem_pio2>:
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	ed2d 8b02 	vpush	{d8}
 8004190:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004194:	f112 0f14 	cmn.w	r2, #20
 8004198:	9308      	str	r3, [sp, #32]
 800419a:	9101      	str	r1, [sp, #4]
 800419c:	4bc4      	ldr	r3, [pc, #784]	; (80044b0 <__kernel_rem_pio2+0x328>)
 800419e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80041a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80041a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80041a6:	9302      	str	r3, [sp, #8]
 80041a8:	9b08      	ldr	r3, [sp, #32]
 80041aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80041ae:	bfa8      	it	ge
 80041b0:	1ed4      	subge	r4, r2, #3
 80041b2:	9306      	str	r3, [sp, #24]
 80041b4:	bfb2      	itee	lt
 80041b6:	2400      	movlt	r4, #0
 80041b8:	2318      	movge	r3, #24
 80041ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80041be:	f06f 0317 	mvn.w	r3, #23
 80041c2:	fb04 3303 	mla	r3, r4, r3, r3
 80041c6:	eb03 0a02 	add.w	sl, r3, r2
 80041ca:	9b02      	ldr	r3, [sp, #8]
 80041cc:	9a06      	ldr	r2, [sp, #24]
 80041ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80044a0 <__kernel_rem_pio2+0x318>
 80041d2:	eb03 0802 	add.w	r8, r3, r2
 80041d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80041d8:	1aa7      	subs	r7, r4, r2
 80041da:	ae22      	add	r6, sp, #136	; 0x88
 80041dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80041e0:	2500      	movs	r5, #0
 80041e2:	4545      	cmp	r5, r8
 80041e4:	dd13      	ble.n	800420e <__kernel_rem_pio2+0x86>
 80041e6:	9b08      	ldr	r3, [sp, #32]
 80041e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80044a0 <__kernel_rem_pio2+0x318>
 80041ec:	aa22      	add	r2, sp, #136	; 0x88
 80041ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80041f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80041f6:	f04f 0800 	mov.w	r8, #0
 80041fa:	9b02      	ldr	r3, [sp, #8]
 80041fc:	4598      	cmp	r8, r3
 80041fe:	dc2f      	bgt.n	8004260 <__kernel_rem_pio2+0xd8>
 8004200:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004204:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004208:	462f      	mov	r7, r5
 800420a:	2600      	movs	r6, #0
 800420c:	e01b      	b.n	8004246 <__kernel_rem_pio2+0xbe>
 800420e:	42ef      	cmn	r7, r5
 8004210:	d407      	bmi.n	8004222 <__kernel_rem_pio2+0x9a>
 8004212:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004216:	f7fc fa73 	bl	8000700 <__aeabi_i2d>
 800421a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800421e:	3501      	adds	r5, #1
 8004220:	e7df      	b.n	80041e2 <__kernel_rem_pio2+0x5a>
 8004222:	ec51 0b18 	vmov	r0, r1, d8
 8004226:	e7f8      	b.n	800421a <__kernel_rem_pio2+0x92>
 8004228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004230:	f7fb ffea 	bl	8000208 <__aeabi_dmul>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800423c:	f7fc f914 	bl	8000468 <__adddf3>
 8004240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004244:	3601      	adds	r6, #1
 8004246:	9b06      	ldr	r3, [sp, #24]
 8004248:	429e      	cmp	r6, r3
 800424a:	f1a7 0708 	sub.w	r7, r7, #8
 800424e:	ddeb      	ble.n	8004228 <__kernel_rem_pio2+0xa0>
 8004250:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004254:	f108 0801 	add.w	r8, r8, #1
 8004258:	ecab 7b02 	vstmia	fp!, {d7}
 800425c:	3508      	adds	r5, #8
 800425e:	e7cc      	b.n	80041fa <__kernel_rem_pio2+0x72>
 8004260:	9b02      	ldr	r3, [sp, #8]
 8004262:	aa0e      	add	r2, sp, #56	; 0x38
 8004264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004268:	930d      	str	r3, [sp, #52]	; 0x34
 800426a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800426c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004270:	9c02      	ldr	r4, [sp, #8]
 8004272:	930c      	str	r3, [sp, #48]	; 0x30
 8004274:	00e3      	lsls	r3, r4, #3
 8004276:	930a      	str	r3, [sp, #40]	; 0x28
 8004278:	ab9a      	add	r3, sp, #616	; 0x268
 800427a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800427e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004282:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004286:	ab72      	add	r3, sp, #456	; 0x1c8
 8004288:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800428c:	46c3      	mov	fp, r8
 800428e:	46a1      	mov	r9, r4
 8004290:	f1b9 0f00 	cmp.w	r9, #0
 8004294:	f1a5 0508 	sub.w	r5, r5, #8
 8004298:	dc77      	bgt.n	800438a <__kernel_rem_pio2+0x202>
 800429a:	ec47 6b10 	vmov	d0, r6, r7
 800429e:	4650      	mov	r0, sl
 80042a0:	f000 fb8a 	bl	80049b8 <scalbn>
 80042a4:	ec57 6b10 	vmov	r6, r7, d0
 80042a8:	2200      	movs	r2, #0
 80042aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80042ae:	ee10 0a10 	vmov	r0, s0
 80042b2:	4639      	mov	r1, r7
 80042b4:	f7fb ffa8 	bl	8000208 <__aeabi_dmul>
 80042b8:	ec41 0b10 	vmov	d0, r0, r1
 80042bc:	f7ff fbb8 	bl	8003a30 <floor>
 80042c0:	4b7c      	ldr	r3, [pc, #496]	; (80044b4 <__kernel_rem_pio2+0x32c>)
 80042c2:	ec51 0b10 	vmov	r0, r1, d0
 80042c6:	2200      	movs	r2, #0
 80042c8:	f7fb ff9e 	bl	8000208 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fc f8c6 	bl	8000464 <__aeabi_dsub>
 80042d8:	460f      	mov	r7, r1
 80042da:	4606      	mov	r6, r0
 80042dc:	f7fc fb02 	bl	80008e4 <__aeabi_d2iz>
 80042e0:	9004      	str	r0, [sp, #16]
 80042e2:	f7fc fa0d 	bl	8000700 <__aeabi_i2d>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4630      	mov	r0, r6
 80042ec:	4639      	mov	r1, r7
 80042ee:	f7fc f8b9 	bl	8000464 <__aeabi_dsub>
 80042f2:	f1ba 0f00 	cmp.w	sl, #0
 80042f6:	4606      	mov	r6, r0
 80042f8:	460f      	mov	r7, r1
 80042fa:	dd6d      	ble.n	80043d8 <__kernel_rem_pio2+0x250>
 80042fc:	1e62      	subs	r2, r4, #1
 80042fe:	ab0e      	add	r3, sp, #56	; 0x38
 8004300:	9d04      	ldr	r5, [sp, #16]
 8004302:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004306:	f1ca 0118 	rsb	r1, sl, #24
 800430a:	fa40 f301 	asr.w	r3, r0, r1
 800430e:	441d      	add	r5, r3
 8004310:	408b      	lsls	r3, r1
 8004312:	1ac0      	subs	r0, r0, r3
 8004314:	ab0e      	add	r3, sp, #56	; 0x38
 8004316:	9504      	str	r5, [sp, #16]
 8004318:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800431c:	f1ca 0317 	rsb	r3, sl, #23
 8004320:	fa40 fb03 	asr.w	fp, r0, r3
 8004324:	f1bb 0f00 	cmp.w	fp, #0
 8004328:	dd65      	ble.n	80043f6 <__kernel_rem_pio2+0x26e>
 800432a:	9b04      	ldr	r3, [sp, #16]
 800432c:	2200      	movs	r2, #0
 800432e:	3301      	adds	r3, #1
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	4615      	mov	r5, r2
 8004334:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004338:	4294      	cmp	r4, r2
 800433a:	f300 809c 	bgt.w	8004476 <__kernel_rem_pio2+0x2ee>
 800433e:	f1ba 0f00 	cmp.w	sl, #0
 8004342:	dd07      	ble.n	8004354 <__kernel_rem_pio2+0x1cc>
 8004344:	f1ba 0f01 	cmp.w	sl, #1
 8004348:	f000 80c0 	beq.w	80044cc <__kernel_rem_pio2+0x344>
 800434c:	f1ba 0f02 	cmp.w	sl, #2
 8004350:	f000 80c6 	beq.w	80044e0 <__kernel_rem_pio2+0x358>
 8004354:	f1bb 0f02 	cmp.w	fp, #2
 8004358:	d14d      	bne.n	80043f6 <__kernel_rem_pio2+0x26e>
 800435a:	4632      	mov	r2, r6
 800435c:	463b      	mov	r3, r7
 800435e:	4956      	ldr	r1, [pc, #344]	; (80044b8 <__kernel_rem_pio2+0x330>)
 8004360:	2000      	movs	r0, #0
 8004362:	f7fc f87f 	bl	8000464 <__aeabi_dsub>
 8004366:	4606      	mov	r6, r0
 8004368:	460f      	mov	r7, r1
 800436a:	2d00      	cmp	r5, #0
 800436c:	d043      	beq.n	80043f6 <__kernel_rem_pio2+0x26e>
 800436e:	4650      	mov	r0, sl
 8004370:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80044a8 <__kernel_rem_pio2+0x320>
 8004374:	f000 fb20 	bl	80049b8 <scalbn>
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	ec53 2b10 	vmov	r2, r3, d0
 8004380:	f7fc f870 	bl	8000464 <__aeabi_dsub>
 8004384:	4606      	mov	r6, r0
 8004386:	460f      	mov	r7, r1
 8004388:	e035      	b.n	80043f6 <__kernel_rem_pio2+0x26e>
 800438a:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <__kernel_rem_pio2+0x334>)
 800438c:	2200      	movs	r2, #0
 800438e:	4630      	mov	r0, r6
 8004390:	4639      	mov	r1, r7
 8004392:	f7fb ff39 	bl	8000208 <__aeabi_dmul>
 8004396:	f7fc faa5 	bl	80008e4 <__aeabi_d2iz>
 800439a:	f7fc f9b1 	bl	8000700 <__aeabi_i2d>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	ec43 2b18 	vmov	d8, r2, r3
 80043a6:	4b46      	ldr	r3, [pc, #280]	; (80044c0 <__kernel_rem_pio2+0x338>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	f7fb ff2d 	bl	8000208 <__aeabi_dmul>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4630      	mov	r0, r6
 80043b4:	4639      	mov	r1, r7
 80043b6:	f7fc f855 	bl	8000464 <__aeabi_dsub>
 80043ba:	f7fc fa93 	bl	80008e4 <__aeabi_d2iz>
 80043be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043c2:	f84b 0b04 	str.w	r0, [fp], #4
 80043c6:	ec51 0b18 	vmov	r0, r1, d8
 80043ca:	f7fc f84d 	bl	8000468 <__adddf3>
 80043ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80043d2:	4606      	mov	r6, r0
 80043d4:	460f      	mov	r7, r1
 80043d6:	e75b      	b.n	8004290 <__kernel_rem_pio2+0x108>
 80043d8:	d106      	bne.n	80043e8 <__kernel_rem_pio2+0x260>
 80043da:	1e63      	subs	r3, r4, #1
 80043dc:	aa0e      	add	r2, sp, #56	; 0x38
 80043de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80043e6:	e79d      	b.n	8004324 <__kernel_rem_pio2+0x19c>
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <__kernel_rem_pio2+0x33c>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	f7fc fa66 	bl	80008bc <__aeabi_dcmpge>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d13d      	bne.n	8004470 <__kernel_rem_pio2+0x2e8>
 80043f4:	4683      	mov	fp, r0
 80043f6:	2200      	movs	r2, #0
 80043f8:	2300      	movs	r3, #0
 80043fa:	4630      	mov	r0, r6
 80043fc:	4639      	mov	r1, r7
 80043fe:	f7fc fa3f 	bl	8000880 <__aeabi_dcmpeq>
 8004402:	2800      	cmp	r0, #0
 8004404:	f000 80c0 	beq.w	8004588 <__kernel_rem_pio2+0x400>
 8004408:	1e65      	subs	r5, r4, #1
 800440a:	462b      	mov	r3, r5
 800440c:	2200      	movs	r2, #0
 800440e:	9902      	ldr	r1, [sp, #8]
 8004410:	428b      	cmp	r3, r1
 8004412:	da6c      	bge.n	80044ee <__kernel_rem_pio2+0x366>
 8004414:	2a00      	cmp	r2, #0
 8004416:	f000 8089 	beq.w	800452c <__kernel_rem_pio2+0x3a4>
 800441a:	ab0e      	add	r3, sp, #56	; 0x38
 800441c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004420:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80ad 	beq.w	8004584 <__kernel_rem_pio2+0x3fc>
 800442a:	4650      	mov	r0, sl
 800442c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80044a8 <__kernel_rem_pio2+0x320>
 8004430:	f000 fac2 	bl	80049b8 <scalbn>
 8004434:	ab9a      	add	r3, sp, #616	; 0x268
 8004436:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800443a:	ec57 6b10 	vmov	r6, r7, d0
 800443e:	00ec      	lsls	r4, r5, #3
 8004440:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004444:	46aa      	mov	sl, r5
 8004446:	f1ba 0f00 	cmp.w	sl, #0
 800444a:	f280 80d6 	bge.w	80045fa <__kernel_rem_pio2+0x472>
 800444e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80044a0 <__kernel_rem_pio2+0x318>
 8004452:	462e      	mov	r6, r5
 8004454:	2e00      	cmp	r6, #0
 8004456:	f2c0 8104 	blt.w	8004662 <__kernel_rem_pio2+0x4da>
 800445a:	ab72      	add	r3, sp, #456	; 0x1c8
 800445c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004460:	f8df a064 	ldr.w	sl, [pc, #100]	; 80044c8 <__kernel_rem_pio2+0x340>
 8004464:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004468:	f04f 0800 	mov.w	r8, #0
 800446c:	1baf      	subs	r7, r5, r6
 800446e:	e0ea      	b.n	8004646 <__kernel_rem_pio2+0x4be>
 8004470:	f04f 0b02 	mov.w	fp, #2
 8004474:	e759      	b.n	800432a <__kernel_rem_pio2+0x1a2>
 8004476:	f8d8 3000 	ldr.w	r3, [r8]
 800447a:	b955      	cbnz	r5, 8004492 <__kernel_rem_pio2+0x30a>
 800447c:	b123      	cbz	r3, 8004488 <__kernel_rem_pio2+0x300>
 800447e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004482:	f8c8 3000 	str.w	r3, [r8]
 8004486:	2301      	movs	r3, #1
 8004488:	3201      	adds	r2, #1
 800448a:	f108 0804 	add.w	r8, r8, #4
 800448e:	461d      	mov	r5, r3
 8004490:	e752      	b.n	8004338 <__kernel_rem_pio2+0x1b0>
 8004492:	1acb      	subs	r3, r1, r3
 8004494:	f8c8 3000 	str.w	r3, [r8]
 8004498:	462b      	mov	r3, r5
 800449a:	e7f5      	b.n	8004488 <__kernel_rem_pio2+0x300>
 800449c:	f3af 8000 	nop.w
	...
 80044ac:	3ff00000 	.word	0x3ff00000
 80044b0:	08004cc8 	.word	0x08004cc8
 80044b4:	40200000 	.word	0x40200000
 80044b8:	3ff00000 	.word	0x3ff00000
 80044bc:	3e700000 	.word	0x3e700000
 80044c0:	41700000 	.word	0x41700000
 80044c4:	3fe00000 	.word	0x3fe00000
 80044c8:	08004c88 	.word	0x08004c88
 80044cc:	1e62      	subs	r2, r4, #1
 80044ce:	ab0e      	add	r3, sp, #56	; 0x38
 80044d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80044d8:	a90e      	add	r1, sp, #56	; 0x38
 80044da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80044de:	e739      	b.n	8004354 <__kernel_rem_pio2+0x1cc>
 80044e0:	1e62      	subs	r2, r4, #1
 80044e2:	ab0e      	add	r3, sp, #56	; 0x38
 80044e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80044ec:	e7f4      	b.n	80044d8 <__kernel_rem_pio2+0x350>
 80044ee:	a90e      	add	r1, sp, #56	; 0x38
 80044f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	e789      	b.n	800440e <__kernel_rem_pio2+0x286>
 80044fa:	3301      	adds	r3, #1
 80044fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004500:	2900      	cmp	r1, #0
 8004502:	d0fa      	beq.n	80044fa <__kernel_rem_pio2+0x372>
 8004504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004506:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800450a:	446a      	add	r2, sp
 800450c:	3a98      	subs	r2, #152	; 0x98
 800450e:	920a      	str	r2, [sp, #40]	; 0x28
 8004510:	9a08      	ldr	r2, [sp, #32]
 8004512:	18e3      	adds	r3, r4, r3
 8004514:	18a5      	adds	r5, r4, r2
 8004516:	aa22      	add	r2, sp, #136	; 0x88
 8004518:	f104 0801 	add.w	r8, r4, #1
 800451c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	9b04      	ldr	r3, [sp, #16]
 8004524:	4543      	cmp	r3, r8
 8004526:	da04      	bge.n	8004532 <__kernel_rem_pio2+0x3aa>
 8004528:	461c      	mov	r4, r3
 800452a:	e6a3      	b.n	8004274 <__kernel_rem_pio2+0xec>
 800452c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800452e:	2301      	movs	r3, #1
 8004530:	e7e4      	b.n	80044fc <__kernel_rem_pio2+0x374>
 8004532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004534:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004538:	f7fc f8e2 	bl	8000700 <__aeabi_i2d>
 800453c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004542:	46ab      	mov	fp, r5
 8004544:	461c      	mov	r4, r3
 8004546:	f04f 0900 	mov.w	r9, #0
 800454a:	2600      	movs	r6, #0
 800454c:	2700      	movs	r7, #0
 800454e:	9b06      	ldr	r3, [sp, #24]
 8004550:	4599      	cmp	r9, r3
 8004552:	dd06      	ble.n	8004562 <__kernel_rem_pio2+0x3da>
 8004554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004556:	e8e3 6702 	strd	r6, r7, [r3], #8
 800455a:	f108 0801 	add.w	r8, r8, #1
 800455e:	930a      	str	r3, [sp, #40]	; 0x28
 8004560:	e7df      	b.n	8004522 <__kernel_rem_pio2+0x39a>
 8004562:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004566:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800456a:	f7fb fe4d 	bl	8000208 <__aeabi_dmul>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4630      	mov	r0, r6
 8004574:	4639      	mov	r1, r7
 8004576:	f7fb ff77 	bl	8000468 <__adddf3>
 800457a:	f109 0901 	add.w	r9, r9, #1
 800457e:	4606      	mov	r6, r0
 8004580:	460f      	mov	r7, r1
 8004582:	e7e4      	b.n	800454e <__kernel_rem_pio2+0x3c6>
 8004584:	3d01      	subs	r5, #1
 8004586:	e748      	b.n	800441a <__kernel_rem_pio2+0x292>
 8004588:	ec47 6b10 	vmov	d0, r6, r7
 800458c:	f1ca 0000 	rsb	r0, sl, #0
 8004590:	f000 fa12 	bl	80049b8 <scalbn>
 8004594:	ec57 6b10 	vmov	r6, r7, d0
 8004598:	4ba0      	ldr	r3, [pc, #640]	; (800481c <__kernel_rem_pio2+0x694>)
 800459a:	ee10 0a10 	vmov	r0, s0
 800459e:	2200      	movs	r2, #0
 80045a0:	4639      	mov	r1, r7
 80045a2:	f7fc f98b 	bl	80008bc <__aeabi_dcmpge>
 80045a6:	b1f8      	cbz	r0, 80045e8 <__kernel_rem_pio2+0x460>
 80045a8:	4b9d      	ldr	r3, [pc, #628]	; (8004820 <__kernel_rem_pio2+0x698>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fb fe2a 	bl	8000208 <__aeabi_dmul>
 80045b4:	f7fc f996 	bl	80008e4 <__aeabi_d2iz>
 80045b8:	4680      	mov	r8, r0
 80045ba:	f7fc f8a1 	bl	8000700 <__aeabi_i2d>
 80045be:	4b97      	ldr	r3, [pc, #604]	; (800481c <__kernel_rem_pio2+0x694>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	f7fb fe21 	bl	8000208 <__aeabi_dmul>
 80045c6:	460b      	mov	r3, r1
 80045c8:	4602      	mov	r2, r0
 80045ca:	4639      	mov	r1, r7
 80045cc:	4630      	mov	r0, r6
 80045ce:	f7fb ff49 	bl	8000464 <__aeabi_dsub>
 80045d2:	f7fc f987 	bl	80008e4 <__aeabi_d2iz>
 80045d6:	1c65      	adds	r5, r4, #1
 80045d8:	ab0e      	add	r3, sp, #56	; 0x38
 80045da:	f10a 0a18 	add.w	sl, sl, #24
 80045de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80045e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80045e6:	e720      	b.n	800442a <__kernel_rem_pio2+0x2a2>
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fc f97a 	bl	80008e4 <__aeabi_d2iz>
 80045f0:	ab0e      	add	r3, sp, #56	; 0x38
 80045f2:	4625      	mov	r5, r4
 80045f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80045f8:	e717      	b.n	800442a <__kernel_rem_pio2+0x2a2>
 80045fa:	ab0e      	add	r3, sp, #56	; 0x38
 80045fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004600:	f7fc f87e 	bl	8000700 <__aeabi_i2d>
 8004604:	4632      	mov	r2, r6
 8004606:	463b      	mov	r3, r7
 8004608:	f7fb fdfe 	bl	8000208 <__aeabi_dmul>
 800460c:	4b84      	ldr	r3, [pc, #528]	; (8004820 <__kernel_rem_pio2+0x698>)
 800460e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004612:	2200      	movs	r2, #0
 8004614:	4630      	mov	r0, r6
 8004616:	4639      	mov	r1, r7
 8004618:	f7fb fdf6 	bl	8000208 <__aeabi_dmul>
 800461c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004620:	4606      	mov	r6, r0
 8004622:	460f      	mov	r7, r1
 8004624:	e70f      	b.n	8004446 <__kernel_rem_pio2+0x2be>
 8004626:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800462a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800462e:	f7fb fdeb 	bl	8000208 <__aeabi_dmul>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800463a:	f7fb ff15 	bl	8000468 <__adddf3>
 800463e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004642:	f108 0801 	add.w	r8, r8, #1
 8004646:	9b02      	ldr	r3, [sp, #8]
 8004648:	4598      	cmp	r8, r3
 800464a:	dc01      	bgt.n	8004650 <__kernel_rem_pio2+0x4c8>
 800464c:	45b8      	cmp	r8, r7
 800464e:	ddea      	ble.n	8004626 <__kernel_rem_pio2+0x49e>
 8004650:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004654:	ab4a      	add	r3, sp, #296	; 0x128
 8004656:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800465a:	ed87 7b00 	vstr	d7, [r7]
 800465e:	3e01      	subs	r6, #1
 8004660:	e6f8      	b.n	8004454 <__kernel_rem_pio2+0x2cc>
 8004662:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004664:	2b02      	cmp	r3, #2
 8004666:	dc0b      	bgt.n	8004680 <__kernel_rem_pio2+0x4f8>
 8004668:	2b00      	cmp	r3, #0
 800466a:	dc35      	bgt.n	80046d8 <__kernel_rem_pio2+0x550>
 800466c:	d059      	beq.n	8004722 <__kernel_rem_pio2+0x59a>
 800466e:	9b04      	ldr	r3, [sp, #16]
 8004670:	f003 0007 	and.w	r0, r3, #7
 8004674:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004678:	ecbd 8b02 	vpop	{d8}
 800467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004680:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004682:	2b03      	cmp	r3, #3
 8004684:	d1f3      	bne.n	800466e <__kernel_rem_pio2+0x4e6>
 8004686:	ab4a      	add	r3, sp, #296	; 0x128
 8004688:	4423      	add	r3, r4
 800468a:	9306      	str	r3, [sp, #24]
 800468c:	461c      	mov	r4, r3
 800468e:	469a      	mov	sl, r3
 8004690:	9502      	str	r5, [sp, #8]
 8004692:	9b02      	ldr	r3, [sp, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f1aa 0a08 	sub.w	sl, sl, #8
 800469a:	dc6b      	bgt.n	8004774 <__kernel_rem_pio2+0x5ec>
 800469c:	46aa      	mov	sl, r5
 800469e:	f1ba 0f01 	cmp.w	sl, #1
 80046a2:	f1a4 0408 	sub.w	r4, r4, #8
 80046a6:	f300 8085 	bgt.w	80047b4 <__kernel_rem_pio2+0x62c>
 80046aa:	9c06      	ldr	r4, [sp, #24]
 80046ac:	2000      	movs	r0, #0
 80046ae:	3408      	adds	r4, #8
 80046b0:	2100      	movs	r1, #0
 80046b2:	2d01      	cmp	r5, #1
 80046b4:	f300 809d 	bgt.w	80047f2 <__kernel_rem_pio2+0x66a>
 80046b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80046bc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80046c0:	f1bb 0f00 	cmp.w	fp, #0
 80046c4:	f040 809b 	bne.w	80047fe <__kernel_rem_pio2+0x676>
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	e9c3 5600 	strd	r5, r6, [r3]
 80046ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80046d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80046d6:	e7ca      	b.n	800466e <__kernel_rem_pio2+0x4e6>
 80046d8:	3408      	adds	r4, #8
 80046da:	ab4a      	add	r3, sp, #296	; 0x128
 80046dc:	441c      	add	r4, r3
 80046de:	462e      	mov	r6, r5
 80046e0:	2000      	movs	r0, #0
 80046e2:	2100      	movs	r1, #0
 80046e4:	2e00      	cmp	r6, #0
 80046e6:	da36      	bge.n	8004756 <__kernel_rem_pio2+0x5ce>
 80046e8:	f1bb 0f00 	cmp.w	fp, #0
 80046ec:	d039      	beq.n	8004762 <__kernel_rem_pio2+0x5da>
 80046ee:	4602      	mov	r2, r0
 80046f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046f4:	9c01      	ldr	r4, [sp, #4]
 80046f6:	e9c4 2300 	strd	r2, r3, [r4]
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004702:	f7fb feaf 	bl	8000464 <__aeabi_dsub>
 8004706:	ae4c      	add	r6, sp, #304	; 0x130
 8004708:	2401      	movs	r4, #1
 800470a:	42a5      	cmp	r5, r4
 800470c:	da2c      	bge.n	8004768 <__kernel_rem_pio2+0x5e0>
 800470e:	f1bb 0f00 	cmp.w	fp, #0
 8004712:	d002      	beq.n	800471a <__kernel_rem_pio2+0x592>
 8004714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004718:	4619      	mov	r1, r3
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004720:	e7a5      	b.n	800466e <__kernel_rem_pio2+0x4e6>
 8004722:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004726:	eb0d 0403 	add.w	r4, sp, r3
 800472a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800472e:	2000      	movs	r0, #0
 8004730:	2100      	movs	r1, #0
 8004732:	2d00      	cmp	r5, #0
 8004734:	da09      	bge.n	800474a <__kernel_rem_pio2+0x5c2>
 8004736:	f1bb 0f00 	cmp.w	fp, #0
 800473a:	d002      	beq.n	8004742 <__kernel_rem_pio2+0x5ba>
 800473c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004740:	4619      	mov	r1, r3
 8004742:	9b01      	ldr	r3, [sp, #4]
 8004744:	e9c3 0100 	strd	r0, r1, [r3]
 8004748:	e791      	b.n	800466e <__kernel_rem_pio2+0x4e6>
 800474a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800474e:	f7fb fe8b 	bl	8000468 <__adddf3>
 8004752:	3d01      	subs	r5, #1
 8004754:	e7ed      	b.n	8004732 <__kernel_rem_pio2+0x5aa>
 8004756:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800475a:	f7fb fe85 	bl	8000468 <__adddf3>
 800475e:	3e01      	subs	r6, #1
 8004760:	e7c0      	b.n	80046e4 <__kernel_rem_pio2+0x55c>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	e7c5      	b.n	80046f4 <__kernel_rem_pio2+0x56c>
 8004768:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800476c:	f7fb fe7c 	bl	8000468 <__adddf3>
 8004770:	3401      	adds	r4, #1
 8004772:	e7ca      	b.n	800470a <__kernel_rem_pio2+0x582>
 8004774:	e9da 8900 	ldrd	r8, r9, [sl]
 8004778:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800477c:	9b02      	ldr	r3, [sp, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	4632      	mov	r2, r6
 8004784:	463b      	mov	r3, r7
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f7fb fe6d 	bl	8000468 <__adddf3>
 800478e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	f7fb fe63 	bl	8000464 <__aeabi_dsub>
 800479e:	4632      	mov	r2, r6
 80047a0:	463b      	mov	r3, r7
 80047a2:	f7fb fe61 	bl	8000468 <__adddf3>
 80047a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80047aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047ae:	ed8a 7b00 	vstr	d7, [sl]
 80047b2:	e76e      	b.n	8004692 <__kernel_rem_pio2+0x50a>
 80047b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80047b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80047bc:	4640      	mov	r0, r8
 80047be:	4632      	mov	r2, r6
 80047c0:	463b      	mov	r3, r7
 80047c2:	4649      	mov	r1, r9
 80047c4:	f7fb fe50 	bl	8000468 <__adddf3>
 80047c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4640      	mov	r0, r8
 80047d2:	4649      	mov	r1, r9
 80047d4:	f7fb fe46 	bl	8000464 <__aeabi_dsub>
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	f7fb fe44 	bl	8000468 <__adddf3>
 80047e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80047e8:	ed84 7b00 	vstr	d7, [r4]
 80047ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047f0:	e755      	b.n	800469e <__kernel_rem_pio2+0x516>
 80047f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80047f6:	f7fb fe37 	bl	8000468 <__adddf3>
 80047fa:	3d01      	subs	r5, #1
 80047fc:	e759      	b.n	80046b2 <__kernel_rem_pio2+0x52a>
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	9a01      	ldr	r2, [sp, #4]
 8004802:	601d      	str	r5, [r3, #0]
 8004804:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004808:	605c      	str	r4, [r3, #4]
 800480a:	609f      	str	r7, [r3, #8]
 800480c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004810:	60d3      	str	r3, [r2, #12]
 8004812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004816:	6110      	str	r0, [r2, #16]
 8004818:	6153      	str	r3, [r2, #20]
 800481a:	e728      	b.n	800466e <__kernel_rem_pio2+0x4e6>
 800481c:	41700000 	.word	0x41700000
 8004820:	3e700000 	.word	0x3e700000
 8004824:	00000000 	.word	0x00000000

08004828 <__kernel_sin>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	ed2d 8b04 	vpush	{d8-d9}
 8004830:	eeb0 8a41 	vmov.f32	s16, s2
 8004834:	eef0 8a61 	vmov.f32	s17, s3
 8004838:	ec55 4b10 	vmov	r4, r5, d0
 800483c:	b083      	sub	sp, #12
 800483e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004842:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004846:	9001      	str	r0, [sp, #4]
 8004848:	da06      	bge.n	8004858 <__kernel_sin+0x30>
 800484a:	ee10 0a10 	vmov	r0, s0
 800484e:	4629      	mov	r1, r5
 8004850:	f7fc f848 	bl	80008e4 <__aeabi_d2iz>
 8004854:	2800      	cmp	r0, #0
 8004856:	d051      	beq.n	80048fc <__kernel_sin+0xd4>
 8004858:	4622      	mov	r2, r4
 800485a:	462b      	mov	r3, r5
 800485c:	4620      	mov	r0, r4
 800485e:	4629      	mov	r1, r5
 8004860:	f7fb fcd2 	bl	8000208 <__aeabi_dmul>
 8004864:	4682      	mov	sl, r0
 8004866:	468b      	mov	fp, r1
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fcca 	bl	8000208 <__aeabi_dmul>
 8004874:	a341      	add	r3, pc, #260	; (adr r3, 800497c <__kernel_sin+0x154>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	4680      	mov	r8, r0
 800487c:	4689      	mov	r9, r1
 800487e:	4650      	mov	r0, sl
 8004880:	4659      	mov	r1, fp
 8004882:	f7fb fcc1 	bl	8000208 <__aeabi_dmul>
 8004886:	a33f      	add	r3, pc, #252	; (adr r3, 8004984 <__kernel_sin+0x15c>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fdea 	bl	8000464 <__aeabi_dsub>
 8004890:	4652      	mov	r2, sl
 8004892:	465b      	mov	r3, fp
 8004894:	f7fb fcb8 	bl	8000208 <__aeabi_dmul>
 8004898:	a33c      	add	r3, pc, #240	; (adr r3, 800498c <__kernel_sin+0x164>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb fde3 	bl	8000468 <__adddf3>
 80048a2:	4652      	mov	r2, sl
 80048a4:	465b      	mov	r3, fp
 80048a6:	f7fb fcaf 	bl	8000208 <__aeabi_dmul>
 80048aa:	a33a      	add	r3, pc, #232	; (adr r3, 8004994 <__kernel_sin+0x16c>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb fdd8 	bl	8000464 <__aeabi_dsub>
 80048b4:	4652      	mov	r2, sl
 80048b6:	465b      	mov	r3, fp
 80048b8:	f7fb fca6 	bl	8000208 <__aeabi_dmul>
 80048bc:	a337      	add	r3, pc, #220	; (adr r3, 800499c <__kernel_sin+0x174>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb fdd1 	bl	8000468 <__adddf3>
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	4606      	mov	r6, r0
 80048ca:	460f      	mov	r7, r1
 80048cc:	b9eb      	cbnz	r3, 800490a <__kernel_sin+0xe2>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4650      	mov	r0, sl
 80048d4:	4659      	mov	r1, fp
 80048d6:	f7fb fc97 	bl	8000208 <__aeabi_dmul>
 80048da:	a325      	add	r3, pc, #148	; (adr r3, 8004970 <__kernel_sin+0x148>)
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f7fb fdc0 	bl	8000464 <__aeabi_dsub>
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	f7fb fc8e 	bl	8000208 <__aeabi_dmul>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4620      	mov	r0, r4
 80048f2:	4629      	mov	r1, r5
 80048f4:	f7fb fdb8 	bl	8000468 <__adddf3>
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	ec45 4b10 	vmov	d0, r4, r5
 8004900:	b003      	add	sp, #12
 8004902:	ecbd 8b04 	vpop	{d8-d9}
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <__kernel_sin+0x150>)
 800490c:	ec51 0b18 	vmov	r0, r1, d8
 8004910:	2200      	movs	r2, #0
 8004912:	f7fb fc79 	bl	8000208 <__aeabi_dmul>
 8004916:	4632      	mov	r2, r6
 8004918:	ec41 0b19 	vmov	d9, r0, r1
 800491c:	463b      	mov	r3, r7
 800491e:	4640      	mov	r0, r8
 8004920:	4649      	mov	r1, r9
 8004922:	f7fb fc71 	bl	8000208 <__aeabi_dmul>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	ec51 0b19 	vmov	r0, r1, d9
 800492e:	f7fb fd99 	bl	8000464 <__aeabi_dsub>
 8004932:	4652      	mov	r2, sl
 8004934:	465b      	mov	r3, fp
 8004936:	f7fb fc67 	bl	8000208 <__aeabi_dmul>
 800493a:	ec53 2b18 	vmov	r2, r3, d8
 800493e:	f7fb fd91 	bl	8000464 <__aeabi_dsub>
 8004942:	a30b      	add	r3, pc, #44	; (adr r3, 8004970 <__kernel_sin+0x148>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	4640      	mov	r0, r8
 800494e:	4649      	mov	r1, r9
 8004950:	f7fb fc5a 	bl	8000208 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fb fd84 	bl	8000468 <__adddf3>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4620      	mov	r0, r4
 8004966:	4629      	mov	r1, r5
 8004968:	f7fb fd7c 	bl	8000464 <__aeabi_dsub>
 800496c:	e7c4      	b.n	80048f8 <__kernel_sin+0xd0>
 800496e:	bf00      	nop
 8004970:	55555549 	.word	0x55555549
 8004974:	3fc55555 	.word	0x3fc55555
 8004978:	3fe00000 	.word	0x3fe00000
 800497c:	5acfd57c 	.word	0x5acfd57c
 8004980:	3de5d93a 	.word	0x3de5d93a
 8004984:	8a2b9ceb 	.word	0x8a2b9ceb
 8004988:	3e5ae5e6 	.word	0x3e5ae5e6
 800498c:	57b1fe7d 	.word	0x57b1fe7d
 8004990:	3ec71de3 	.word	0x3ec71de3
 8004994:	19c161d5 	.word	0x19c161d5
 8004998:	3f2a01a0 	.word	0x3f2a01a0
 800499c:	1110f8a6 	.word	0x1110f8a6
 80049a0:	3f811111 	.word	0x3f811111

080049a4 <fabs>:
 80049a4:	ec51 0b10 	vmov	r0, r1, d0
 80049a8:	ee10 2a10 	vmov	r2, s0
 80049ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049b0:	ec43 2b10 	vmov	d0, r2, r3
 80049b4:	4770      	bx	lr
	...

080049b8 <scalbn>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	ec55 4b10 	vmov	r4, r5, d0
 80049be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80049c2:	4606      	mov	r6, r0
 80049c4:	462b      	mov	r3, r5
 80049c6:	b99a      	cbnz	r2, 80049f0 <scalbn+0x38>
 80049c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80049cc:	4323      	orrs	r3, r4
 80049ce:	d036      	beq.n	8004a3e <scalbn+0x86>
 80049d0:	4b39      	ldr	r3, [pc, #228]	; (8004ab8 <scalbn+0x100>)
 80049d2:	4629      	mov	r1, r5
 80049d4:	ee10 0a10 	vmov	r0, s0
 80049d8:	2200      	movs	r2, #0
 80049da:	f7fb fc15 	bl	8000208 <__aeabi_dmul>
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <scalbn+0x104>)
 80049e0:	429e      	cmp	r6, r3
 80049e2:	4604      	mov	r4, r0
 80049e4:	460d      	mov	r5, r1
 80049e6:	da10      	bge.n	8004a0a <scalbn+0x52>
 80049e8:	a32b      	add	r3, pc, #172	; (adr r3, 8004a98 <scalbn+0xe0>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	e03a      	b.n	8004a66 <scalbn+0xae>
 80049f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80049f4:	428a      	cmp	r2, r1
 80049f6:	d10c      	bne.n	8004a12 <scalbn+0x5a>
 80049f8:	ee10 2a10 	vmov	r2, s0
 80049fc:	4620      	mov	r0, r4
 80049fe:	4629      	mov	r1, r5
 8004a00:	f7fb fd32 	bl	8000468 <__adddf3>
 8004a04:	4604      	mov	r4, r0
 8004a06:	460d      	mov	r5, r1
 8004a08:	e019      	b.n	8004a3e <scalbn+0x86>
 8004a0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a0e:	460b      	mov	r3, r1
 8004a10:	3a36      	subs	r2, #54	; 0x36
 8004a12:	4432      	add	r2, r6
 8004a14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004a18:	428a      	cmp	r2, r1
 8004a1a:	dd08      	ble.n	8004a2e <scalbn+0x76>
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	a120      	add	r1, pc, #128	; (adr r1, 8004aa0 <scalbn+0xe8>)
 8004a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a24:	da1c      	bge.n	8004a60 <scalbn+0xa8>
 8004a26:	a120      	add	r1, pc, #128	; (adr r1, 8004aa8 <scalbn+0xf0>)
 8004a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2c:	e018      	b.n	8004a60 <scalbn+0xa8>
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	dd08      	ble.n	8004a44 <scalbn+0x8c>
 8004a32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a3e:	ec45 4b10 	vmov	d0, r4, r5
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a48:	da19      	bge.n	8004a7e <scalbn+0xc6>
 8004a4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a4e:	429e      	cmp	r6, r3
 8004a50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004a54:	dd0a      	ble.n	8004a6c <scalbn+0xb4>
 8004a56:	a112      	add	r1, pc, #72	; (adr r1, 8004aa0 <scalbn+0xe8>)
 8004a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e2      	bne.n	8004a26 <scalbn+0x6e>
 8004a60:	a30f      	add	r3, pc, #60	; (adr r3, 8004aa0 <scalbn+0xe8>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fbcf 	bl	8000208 <__aeabi_dmul>
 8004a6a:	e7cb      	b.n	8004a04 <scalbn+0x4c>
 8004a6c:	a10a      	add	r1, pc, #40	; (adr r1, 8004a98 <scalbn+0xe0>)
 8004a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0b8      	beq.n	80049e8 <scalbn+0x30>
 8004a76:	a10e      	add	r1, pc, #56	; (adr r1, 8004ab0 <scalbn+0xf8>)
 8004a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7c:	e7b4      	b.n	80049e8 <scalbn+0x30>
 8004a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a82:	3236      	adds	r2, #54	; 0x36
 8004a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <scalbn+0x108>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	e7e8      	b.n	8004a66 <scalbn+0xae>
 8004a94:	f3af 8000 	nop.w
 8004a98:	c2f8f359 	.word	0xc2f8f359
 8004a9c:	01a56e1f 	.word	0x01a56e1f
 8004aa0:	8800759c 	.word	0x8800759c
 8004aa4:	7e37e43c 	.word	0x7e37e43c
 8004aa8:	8800759c 	.word	0x8800759c
 8004aac:	fe37e43c 	.word	0xfe37e43c
 8004ab0:	c2f8f359 	.word	0xc2f8f359
 8004ab4:	81a56e1f 	.word	0x81a56e1f
 8004ab8:	43500000 	.word	0x43500000
 8004abc:	ffff3cb0 	.word	0xffff3cb0
 8004ac0:	3c900000 	.word	0x3c900000

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
